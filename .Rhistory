x = "Future",
y = "% Risky Choices"
) +
ylim(40, 70) +
theme_minimal() +
poster_theme +
facet_wrap(~ diagnosis_depression, labeller = labeller(diagnosis_anxiety = c("dep" = "Depression", "no dep" = "No Depression")))
# Display the plot
print(fig1b)
fig1b2 <- ggplot(summary_gamb_future, aes(x = Future, y = mean_gambling, color = Future)) +
geom_point(position = position_dodge(0.3)) +
geom_errorbar(aes(ymin = mean_gambling - sem_gambling, ymax = mean_gambling + sem_gambling),
position = position_dodge(0.3), width = 0.1) +
geom_hline(yintercept = 50, linetype = "dotted", color = "black") +
scale_color_manual(values = c("Positive" = "#FFD700", "Negative" = "#FF6347")) +
labs(
title = paste0("% Gambling based on Future (Gain Domain) (N = ", sample_size, ")"),
x = "Future",
y = "% Risky Choices"
) +
ylim(40, 70) +
theme_minimal() +
poster_theme +
facet_wrap(~ diagnosis_depression, labeller = labeller(diagnosis_anxiety = c("dep" = "Depression", "no dep" = "No Depression")))
# Display the plot
print(fig1b2)
summary_gamb_future <- gamb_future %>%
group_by(Future, diagnosis_depression) %>%
summarise(mean_gambling = mean(percent_risky, na.rm = TRUE),
sem_gambling = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
.groups = 'drop') %>%
na.omit()
# Create the plot with facet_wrap for "anx" and "no anx" groups
fig1b2 <- ggplot(summary_gamb_future, aes(x = Future, y = mean_gambling, color = Future)) +
geom_point(position = position_dodge(0.3)) +
geom_errorbar(aes(ymin = mean_gambling - sem_gambling, ymax = mean_gambling + sem_gambling),
position = position_dodge(0.3), width = 0.1) +
geom_hline(yintercept = 50, linetype = "dotted", color = "black") +
scale_color_manual(values = c("Positive" = "#FFD700", "Negative" = "#FF6347")) +
labs(
title = paste0("% Gambling based on Future (Gain Domain) (N = ", sample_size, ")"),
x = "Future",
y = "% Risky Choices"
) +
ylim(40, 70) +
theme_minimal() +
poster_theme +
facet_wrap(~ diagnosis_depression, labeller = labeller(diagnosis_anxiety = c("dep" = "Depression", "no dep" = "No Depression")))
# Display the plot
print(fig1b2)
fig1b2 <- ggplot(summary_gamb_future, aes(x = Future, y = mean_gambling, color = Future)) +
geom_point(position = position_dodge(0.3)) +
geom_errorbar(aes(ymin = mean_gambling - sem_gambling, ymax = mean_gambling + sem_gambling),
position = position_dodge(0.3), width = 0.1) +
geom_hline(yintercept = 50, linetype = "dotted", color = "black") +
scale_color_manual(values = c("Positive" = "#FFD700", "Negative" = "#FF6347")) +
labs(
title = paste0("% Gambling based on Future (Gain Domain) (N = ", sample_size, ")"),
x = "Future",
y = "% Risky Choices"
) +
ylim(40, 70) +
theme_minimal() +
poster_theme +
facet_wrap(~ diagnosis_depression, labeller = labeller(diagnosis_depression = c("dep" = "Depression", "no dep" = "No Depression")))
# Display the plot
print(fig1b2)
# data paths
data_path <- "C:\\Users\\Ellen Martin\\OneDrive\\Desktop\\Rutledge Lab\\ApathyDepression\\updatedData\\data\\happyData\\"
### play one for people with at least two plays - play 1
one_long_file_z <- paste0(data_path,"z\\THP_uk_DiggingHappy3_z_n960.csv") #zscored
### parameters and model fits data - for play 3 this is the 4 parameter model
happy_file_one_z <- paste0(data_path, "modelBased\\z\\happy_params4_play3_z_n960.csv")
### parameters and model fits data - for play 3 this is the 6 parameter model
happy_file_one_z_6 <- paste0(data_path, "modelBased\\z\\happy_params6_play3_z_n960.csv")
### survey data
survey_file <- paste0("C:\\Users\\Ellen Martin\\OneDrive\\Desktop\\Rutledge Lab\\ApathyDepression\\updatedData\\analyses\\uk_general_survey.csv")
### initial quiz data
initquiz_file <- paste0(data_path, "THP_uk_initquiz.csv")
# cleaning and merging data
T_digging_long_z <- process_digging_long_z(one_long_file_z)
length(unique(T_digging_long_z$userKey)) #N=2190
T_digging_long_z <- process_params_z(T_digging_long_z,happy_file_one_z)
length(unique(T_digging_long_z$userKey)) #2190
head(T_digging_long_z)
happyData1 <- process_survey_data(T_digging_long_z,survey_file)
happyData1 <- happyData1 %>%
arrange(userKey, PlayNo, TrialNumber)
### backfill z-scored
happyData1 <- happyData1 %>%
mutate(zHappy_filled = zHappy) %>%
fill(zHappy_filled, .direction = "up")
happyData1 <- happyData1 %>%
mutate(zHappyPred_filled = zHappyPred) %>%
fill(zHappyPred_filled, .direction = "up")
length(unique(happyData1$userKey)) #1921
### GAD and PHQ bins
happyData1 <- happyData1 %>%
mutate(GAD_bin = cut(gad7_total, breaks = c(-Inf, 4, 9, 14, 21), labels = c("0-4", "5-9", "10-14", "15-21")),
PHQ_bin = cut(phq8_total, breaks = c(-Inf, 4, 9, 14, 24), labels = c("0-4", "5-9", "10-14", "15-24")),
GAD_binary = case_when(gad7_total >= 6 ~ "GAD 6+",
gad7_total < 6 ~ "GAD <6"),
PHQ_binary = case_when(phq8_total >= 7 ~ "PHQ 7+",
phq8_total < 7 ~ "PHQ <7"))
# Anxiety and Depression Diagnoses Analyses
T_survey <- read_csv(survey_file)
diag <- T_survey %>%
dplyr::select(c("diagnosis_depression","diagnosis_anxiety","userKey"))
head(diag)
happyData1_diag <- merge(happyData1, diag, by="userKey")
happyData1_diag <- happyData1_diag %>%
filter(!is.na(diagnosis_anxiety) & !is.na(diagnosis_depression)) %>%
mutate(diagnosis_anxiety = as.factor(diagnosis_anxiety),
diagnosis_depression = as.factor(diagnosis_depression)) %>%
mutate(diagnosis_anxiety = case_when(diagnosis_anxiety == 1 ~ "anx",
diagnosis_anxiety == 0 ~ "no anx"),
diagnosis_depression = case_when(diagnosis_depression == 1 ~ "dep",
diagnosis_depression == 0 ~ "no dep"))
sample_size  = (unique(happyData1_diag$userKey)) # N = 1592
happyData1_diag$diagnosis_anxiety <- as.factor(happyData1_diag$diagnosis_anxiety)
happyData1_diag$diagnosis_depression <- as.factor(happyData1_diag$diagnosis_depression)
# past
happyData1_past <- happyData1 %>%
arrange(userKey, TrialNumber) %>%
group_by(userKey) %>%
mutate(
# Create an indicator for valid happiness ratings
happyind = !is.na(zHappy),
# Identify if the current trial is on the same island as the previous valid happiness rating
prev_happyind_trial = lag(Trial, order_by = TrialNumber),  # Previous trial type (Gain/Loss)
# Set PastIsland based on the previous valid happiness rating's trial type
PastIsland = case_when(
lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Gain" ~ 2,
lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Loss" ~ 1,
TRUE ~ NA_real_  # NA for the first island or no previous valid row
)
) %>%
ungroup()
happyData1_past <- happyData1_past %>%
fill(PastIsland, .direction = "up")
sample_size = length(unique(happyData1$userKey))
happyData1_past_diag <- happyData1_diag %>%
arrange(userKey, TrialNumber) %>%
group_by(userKey) %>%
mutate(
# Create an indicator for valid happiness ratings
happyind = !is.na(zHappy),
# Identify if the current trial is on the same island as the previous valid happiness rating
prev_happyind_trial = lag(Trial, order_by = TrialNumber),  # Previous trial type (Gain/Loss)
# Set PastIsland based on the previous valid happiness rating's trial type
PastIsland = case_when(
lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Gain" ~ 2,
lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Loss" ~ 1,
TRUE ~ NA_real_  # NA for the first island or no previous valid row
)
) %>%
ungroup()
happyData1_past_diag <- happyData1_past_diag %>%
fill(PastIsland, .direction = "up")
# anxiety diagnosis
anx <- happyData1_past_diag %>%
filter(diagnosis_anxiety=="anx")
sample_size = length(unique(anx$userKey))
# current gain, past positive, future positive
current_pos_past_pos_future_pos <- anx %>%
filter(NextIsland == 2, PastIsland == 2, Trial == "Gain") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Positive Past",
Future = "Positive Future",
Current = "Gain")
# current gain, past negative, future negative
current_pos_past_neg_future_neg <- anx %>%
filter(NextIsland == 1, PastIsland == 1, Trial == "Gain") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past  = "Negative Past",
Future = "Negative Future",
Current = "Gain")
# current loss, past positive, future positive
current_neg_past_pos_future_pos <- anx %>%
filter(NextIsland == 2, PastIsland == 2 , Trial == "Loss") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past= "Positive Past",
Future="Positive Future",
Current = "Loss")
# current loss, past negative, future negative
current_neg_past_neg_future_neg <- anx %>%
filter(NextIsland == 1, PastIsland == 1, Trial == "Loss") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Negative Past",
Future = "Negative Future",
Current = "Loss")
# current gain, past negative, future positive
current_pos_past_neg_future_pos <- anx %>%
filter(NextIsland == 2, PastIsland == 1, Trial == "Gain") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Negative Past",
Future = "Positive Future",
Current = "Gain")
# current gain, past positive, future negative
current_pos_past_pos_future_neg <- anx %>%
filter(NextIsland == 1, PastIsland == 2, Trial == "Gain") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Positive Past",
Future = "Negative Future",
Current = "Gain")
# current loss, past negative, future positive
current_neg_past_neg_future_pos <- anx %>%
filter(NextIsland == 2, PastIsland == 1 , Trial == "Loss") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Negative Past",
Future = "Positive Future",
Current = "Loss")
# current loss, past positive, future negative
current_neg_past_pos_future_neg <- anx %>%
filter(NextIsland == 1, PastIsland == 2, Trial == "Loss") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Positive Past",
Future = "Negative Future",
Current = "Loss")
# Combine results
combined_risky <- bind_rows(current_pos_past_neg_future_pos, current_pos_past_pos_future_neg, current_neg_past_neg_future_pos,current_neg_past_pos_future_neg,current_pos_past_pos_future_pos,current_pos_past_neg_future_neg,current_neg_past_pos_future_pos,current_neg_past_neg_future_neg)
summary_combined <- combined_risky %>%
group_by(Current, Past, Future) %>%
summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))
# Plotting
ggplot(summary_combined, aes(x = Past, y = mean_risky, color = Future, group = Future)) +
geom_point(position = position_dodge(0.7), width = 0.7) +
geom_line(position = position_dodge(0.7), aes(group = Future)) +  # Add lines connecting points within groups
geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
position = position_dodge(0.7), width = 0.2) +
geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
labs(
title = paste0("% Risky Choices based on Past and Future (N=", sample_size, ")"),
x = "Past",
y = "% Risky Choices"
) +
theme_minimal() +
ylim(40, 70) +
poster_theme +
facet_wrap(~Current)
anx$Choice <- as.factor(anx$Choice)
anx$ChoiceBinary <- ifelse(anx$Choice == 2, 1, 0) # if risk chosen 1, if safe chosen, 0
anx$PastIslandBinary <- ifelse(anx$PastIsland == 2, 1, 0) # if positive 1, if negative 0
anx$NextIslandBinary <- ifelse(anx$NextIsland == 2, 1, 0) # if positive 1, if negative 0 - so 0 is my refernece
## DOMAIN - split by domain
happyData1_past_gain <- anx %>%
filter(Trial=="Gain")
lm1_gain_future <-  glm(ChoiceBinary ~ NextIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm1_gain_future)
happyData1_past_loss <- anx %>%
filter(Trial=="Loss")
lm1_loss_future <-  glm(ChoiceBinary ~ NextIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm1_loss_future)
lm1_gain_past <-  glm(ChoiceBinary ~ PastIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm1_gain_past)
lm1_loss_past <-  glm(ChoiceBinary ~ PastIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm1_loss_past)
lm1_gain_future <-  glm(ChoiceBinary ~ NextIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm1_gain_future)
summary(lm1_loss_future)
summary(lm1_gain_past)
lm1_loss_past <-  glm(ChoiceBinary ~ PastIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm1_loss_past)
lm1_gain <- glm(ChoiceBinary ~ PastIslandBinary + NextIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm1_gain)
lm1_loss <- glm(ChoiceBinary ~ PastIslandBinary + NextIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm1_loss)
#interaction
lm2_gain <- glm(ChoiceBinary ~  PastIslandBinary*NextIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm2_gain)
lm2_loss <- glm(ChoiceBinary ~  PastIslandBinary*NextIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm2_loss)
anx <- happyData1_past_diag %>%
filter(diagnosis_anxiety=="no anx")
sample_size = length(unique(anx$userKey))
# current gain, past positive, future positive
current_pos_past_pos_future_pos <- anx %>%
filter(NextIsland == 2, PastIsland == 2, Trial == "Gain") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Positive Past",
Future = "Positive Future",
Current = "Gain")
# current gain, past negative, future negative
current_pos_past_neg_future_neg <- anx %>%
filter(NextIsland == 1, PastIsland == 1, Trial == "Gain") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past  = "Negative Past",
Future = "Negative Future",
Current = "Gain")
# current loss, past positive, future positive
current_neg_past_pos_future_pos <- anx %>%
filter(NextIsland == 2, PastIsland == 2 , Trial == "Loss") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past= "Positive Past",
Future="Positive Future",
Current = "Loss")
# current loss, past negative, future negative
current_neg_past_neg_future_neg <- anx %>%
filter(NextIsland == 1, PastIsland == 1, Trial == "Loss") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Negative Past",
Future = "Negative Future",
Current = "Loss")
# current gain, past negative, future positive
current_pos_past_neg_future_pos <- anx %>%
filter(NextIsland == 2, PastIsland == 1, Trial == "Gain") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Negative Past",
Future = "Positive Future",
Current = "Gain")
# current gain, past positive, future negative
current_pos_past_pos_future_neg <- anx %>%
filter(NextIsland == 1, PastIsland == 2, Trial == "Gain") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Positive Past",
Future = "Negative Future",
Current = "Gain")
# current loss, past negative, future positive
current_neg_past_neg_future_pos <- anx %>%
filter(NextIsland == 2, PastIsland == 1 , Trial == "Loss") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Negative Past",
Future = "Positive Future",
Current = "Loss")
# current loss, past positive, future negative
current_neg_past_pos_future_neg <- anx %>%
filter(NextIsland == 1, PastIsland == 2, Trial == "Loss") %>%
group_by(userKey) %>%
summarise(total_choices = n(),
risky_choices = sum(Choice == 2, na.rm = TRUE),
percent_risky = (risky_choices / total_choices) * 100,
.groups = 'drop') %>%
mutate(Past = "Positive Past",
Future = "Negative Future",
Current = "Loss")
# Combine results
combined_risky <- bind_rows(current_pos_past_neg_future_pos, current_pos_past_pos_future_neg, current_neg_past_neg_future_pos,current_neg_past_pos_future_neg,current_pos_past_pos_future_pos,current_pos_past_neg_future_neg,current_neg_past_pos_future_pos,current_neg_past_neg_future_neg)
summary_combined <- combined_risky %>%
group_by(Current, Past, Future) %>%
summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))
# Plotting
ggplot(summary_combined, aes(x = Past, y = mean_risky, color = Future, group = Future)) +
geom_point(position = position_dodge(0.7), width = 0.7) +
geom_line(position = position_dodge(0.7), aes(group = Future)) +  # Add lines connecting points within groups
geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
position = position_dodge(0.7), width = 0.2) +
geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
labs(
title = paste0("% Risky Choices based on Past and Future (N=", sample_size, ")"),
x = "Past",
y = "% Risky Choices"
) +
theme_minimal() +
ylim(40, 70) +
poster_theme +
facet_wrap(~Current)
anx$Choice <- as.factor(anx$Choice)
anx$ChoiceBinary <- ifelse(anx$Choice == 2, 1, 0) # if risk chosen 1, if safe chosen, 0
anx$PastIslandBinary <- ifelse(anx$PastIsland == 2, 1, 0) # if positive 1, if negative 0
anx$NextIslandBinary <- ifelse(anx$NextIsland == 2, 1, 0) # if positive 1, if negative 0 - so 0 is my refernece
## DOMAIN - split by domain
happyData1_past_gain <- anx %>%
filter(Trial=="Gain")
lm1_gain_future <-  glm(ChoiceBinary ~ NextIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm1_gain_future)
happyData1_past_loss <- anx %>%
filter(Trial=="Loss")
lm1_loss_future <-  glm(ChoiceBinary ~ NextIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm1_loss_future)
lm1_gain_past <-  glm(ChoiceBinary ~ PastIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm1_gain_past)
lm1_loss_past <-  glm(ChoiceBinary ~ PastIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm1_loss_past)
lm1_gain <- glm(ChoiceBinary ~ PastIslandBinary + NextIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm1_gain)
lm1_loss <- glm(ChoiceBinary ~ PastIslandBinary + NextIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm1_loss)
anx$Choice <- as.factor(anx$Choice)
anx$ChoiceBinary <- ifelse(anx$Choice == 2, 1, 0) # if risk chosen 1, if safe chosen, 0
anx$PastIslandBinary <- ifelse(anx$PastIsland == 2, 1, 0) # if positive 1, if negative 0
anx$NextIslandBinary <- ifelse(anx$NextIsland == 2, 1, 0) # if positive 1, if negative 0 - so 0 is my refernece
## DOMAIN - split by domain
happyData1_past_gain <- anx %>%
filter(Trial=="Gain")
lm1_gain_future <-  glm(ChoiceBinary ~ NextIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm1_gain_future)
happyData1_past_loss <- anx %>%
filter(Trial=="Loss")
lm1_loss_future <-  glm(ChoiceBinary ~ NextIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm1_loss_future)
lm1_gain_past <-  glm(ChoiceBinary ~ PastIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm1_gain_past)
lm1_loss_past <-  glm(ChoiceBinary ~ PastIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm1_loss_past)
lm1_gain <- glm(ChoiceBinary ~ PastIslandBinary + NextIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm1_gain)
lm1_loss <- glm(ChoiceBinary ~ PastIslandBinary + NextIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm1_loss)
lm2_gain <- glm(ChoiceBinary ~  PastIslandBinary*NextIslandBinary,
data=happyData1_past_gain,
family=binomial)
summary(lm2_gain)
lm2_loss <- glm(ChoiceBinary ~  PastIslandBinary*NextIslandBinary,
data=happyData1_past_loss,
family=binomial)
summary(lm2_loss)
