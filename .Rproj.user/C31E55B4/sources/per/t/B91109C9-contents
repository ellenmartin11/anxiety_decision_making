---
title: "DiggingCPC_4"
author: "Ellen Martin"
date: "`r Sys.Date()`"
output: html_document
---

Analyzing Multiple Plays of Digging Game Data

```{r Libraries}
library(readr) # importing
library(NatParksPalettes) # colours!
library(ggplot2) # plots
library(Hmisc) # for computing correlation stuff
library(knitr) # for markdown
library(tidyverse, warn.conflict=F) # tidy
library(corrplot) # correlations
library(dplyr) # tidy
library(MASS)
library(sandwich)
library(lmtest) # modelling
library(broom)
library(gt)
library(lme4) # modelling
library(dunn.test) # posthoc
library(emmeans) # posthoc
library(geepack) # generalized estimating equations (robust glme models
library(coin) # permuation testing
library(parallel) # for parallel processing



source("poster_theme.R") #for figure themes
source("functions/process_initquiz.R")
source("functions/process_digging_long.R")
source("functions/process_params.R")
source("functions/softmax.R")


```
This is for Play 1 only. To read in plays 2, 3 and 4, read in the data from DiggingCPC_5_play2, DiggingCPC_extra (which contains play 3), and DiggingCPC_4_play4.


```{r Data Paths and Merging Data PLAY 1}
# data paths
data_path <- "C:\\Users\\Ellen Martin\\OneDrive\\Desktop\\Rutledge Lab\\ApathyDepression\\updatedData\\data\\happyData\\"

### play one for people with at least one play 
one_long_file_z <- paste0(data_path,"z\\THP_uk_DiggingHappy1_z_n8081.csv") #zscored


### parameters and model fits data
happy_file_one_z <- paste0(data_path, "modelBased\\z\\happy_params4_play1_z_n7579.csv")

### survey data
survey_file <- paste0("C:\\Users\\Ellen Martin\\OneDrive\\Desktop\\Rutledge Lab\\ApathyDepression\\updatedData\\analyses\\uk_general_survey.csv")

### initial quiz data
initquiz_file <- paste0(data_path, "THP_uk_initquiz.csv")

# cleaning and merging data
T_digging_long_z <- process_digging_long_z(one_long_file_z)
length(unique(T_digging_long_z$userKey)) #N=7555

T_digging_long_z <- process_params_z(T_digging_long_z,happy_file_one_z)
length(unique(T_digging_long_z$userKey)) #7555
head(T_digging_long_z)

happyData1 <- process_survey_data(T_digging_long_z,survey_file)

happyData1 <- happyData1 %>%
  arrange(userKey, PlayNo, TrialNumber)


### backfill z-scored
happyData1 <- happyData1 %>%
  mutate(zHappy_filled = zHappy) %>%
  fill(zHappy_filled, .direction = "up")

happyData1 <- happyData1 %>%
  mutate(zHappyPred_filled = zHappyPred) %>%
  fill(zHappyPred_filled, .direction = "up")

sample_size = length(unique(happyData1$userKey))

### GAD and PHQ bins
happyData1 <- happyData1 %>%
  mutate(GAD_bin = cut(gad7_total, breaks = c(-Inf, 4, 9, 14, 21), labels = c("0-4", "5-9", "10-14", "15-21")),
      PHQ_bin = cut(phq8_total, breaks = c(-Inf, 4, 9, 14, 24), labels = c("0-4", "5-9", "10-14", "15-24")),
      GAD_binary = case_when(gad7_total >= 6 ~ "GAD 6+",
                             gad7_total < 6 ~ "GAD <6"),
      PHQ_binary = case_when(phq8_total >= 7 ~ "PHQ 7+",
                             phq8_total < 7 ~ "PHQ <7"))

# Anxiety and Depression Diagnoses Analyses
T_survey <- read_csv(survey_file)

diag <- T_survey %>%
  dplyr::select(c("diagnosis_depression","diagnosis_anxiety","userKey"))

head(diag)

happyData1_diag <- merge(happyData1, diag, by="userKey")

happyData1_diag <- happyData1_diag %>%
  filter(!is.na(diagnosis_anxiety) & !is.na(diagnosis_depression)) %>%
  mutate(diagnosis_anxiety = as.factor(diagnosis_anxiety),
         diagnosis_depression = as.factor(diagnosis_depression)) %>%
  mutate(diagnosis_anxiety = case_when(diagnosis_anxiety == 1 ~ "anx",
                                       diagnosis_anxiety == 0 ~ "no anx"),
         diagnosis_depression = case_when(diagnosis_depression == 1 ~ "dep",
                                          diagnosis_depression == 0 ~ "no dep"))


length(unique(happyData1_diag$userKey)) #play 1 N = 2967, #play 2 N = 1585

happyData1_diag$diagnosis_anxiety <- as.factor(happyData1_diag$diagnosis_anxiety)
happyData1_diag$diagnosis_depression <- as.factor(happyData1_diag$diagnosis_depression)


# past
happyData1_past <- happyData1 %>%
  arrange(userKey, TrialNumber) %>%
  group_by(userKey) %>%
  mutate(
    # Create an indicator for valid happiness ratings
    happyind = !is.na(zHappy),
    
    # Identify if the current trial is on the same island as the previous valid happiness rating
    prev_happyind_trial = lag(Trial, order_by = TrialNumber),  # Previous trial type (Gain/Loss)
    
    # Set PastIsland based on the previous valid happiness rating's trial type
    PastIsland = case_when(
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Gain" ~ 2,
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Loss" ~ 1,
      TRUE ~ NA_real_  # NA for the first island or no previous valid row
    )
  ) %>%
  ungroup()

happyData1_past <- happyData1_past %>%
  fill(PastIsland, .direction = "up")

```
### Appending version number (play order progression)

```{r Version number}
# need to loop through each user key and take note of the order of the Trial, assign that a number.
# check next userkey and see if the order of Trial matches any existing one we have, if not assign a new number (+1)

sequence_data <- happyData1 %>%
  arrange(userKey, TrialNumber) %>%                   # Ensure correct order of trials for each participant
  #mutate(domain_code = ifelse(Trial == "Gain", 1, -1)) %>%  # Convert domain to 1 for gain and -1 for loss
  group_by(userKey) %>%
  summarise(trial_sequence = paste(Trial, collapse = " "))  # Collapse trials into a sequence string

unique_sequences <- sequence_data %>%
  distinct(trial_sequence) %>%                  # Get unique trial sequences
  mutate(pattern_id = row_number())             # Assign a unique pattern ID to each sequence

happyData1 <- happyData1 %>%
  left_join(sequence_data, by = "userKey") %>%  # Join the trial sequences by userKey
  left_join(unique_sequences, by = "trial_sequence")  # Join pattern IDs based on trial sequences


length(unique(happyData1$pattern_id)) #24 unique game versions (good this matches with matlab)

### plot showing the progression of trials in the 24 unique sequences

ggplot(happyData1, aes(x = TrialNumber, y = factor(pattern_id), fill = Trial)) +
  geom_tile(width = 0.9, height = 0.9) +  # Create tile plot for Gain/Loss
  scale_fill_manual(values = c("Gain" = "gold", "Loss" = "red")) +  # Assign colors for Gain and Loss
  labs(x = "Trial Number", y = "Pattern ID", fill = "Domain") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 8)) +  # Adjust y-axis text size
  ggtitle("24 Unique Trial Sequences for Participants")


```

### Reading in 6 Parameter Happiness Model

```{r 6 Parameter Model}
happy_file_one_z_6 <- paste0(data_path, "modelBased\\z\\happy_params6_play1_z_n7579.csv")
params6 <- read.csv(happy_file_one_z_6)
params_multi <- params6 %>%
    rename(
      ev_safe = b_evrpe_1,
      rpe_safe = b_evrpe_2,
      ev_risky = b_evrpe_3,
      rpe_risky = b_evrpe_4,
      tau_split = b_evrpe_5,
      const_split = b_evrpe_6,
      r2_split = r2,
      sse_split = sse,
      aic_split = aic,
      bic_split =bic
    )

happyData1_6 <- merge(happyData1, params_multi, by="userKey")
mean(params_multi$r2_split)
mean(params_multi$aic_split)
mean(params_multi$bic_split)

# mean tau and baseline happiness

mean(params_multi$tau_split) 
mean(params_multi$const_split)

cor.test(params_multi$ev_risky,params_multi$ev_safe,method="spearman")
cor.test(params_multi$rpe_risky,params_multi$rpe_safe,method="spearman")
cor.test(params_multi$rpe_risky,params_multi$ev_risky,method="spearman")
cor.test(params_multi$rpe_safe,params_multi$ev_safe,method="spearman")
```


# Average Percentage of Gambling

```{r}
risky_data <- happyData1 %>%
    group_by(userKey, Trial) %>%
    summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop')


summary_data <- risky_data %>%
    group_by(Trial) %>%
    summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
              se_percent_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
              .groups = 'drop')
  
### plot 

  ggplot(summary_data, aes(x = Trial, y = mean_percent_risky, color = Trial)) +
    geom_point(position = position_dodge(0.8), size = 3) +
    geom_errorbar(aes(ymin = mean_percent_risky - se_percent_risky, ymax = mean_percent_risky + se_percent_risky),
                  width = 0.2) +
    labs(
      title = "% Risky Choices Play 1 (N=", sample_size, ")",
      x = "Trial Type",
      y = "% Risky Choices"
    ) +
    theme_minimal() +
    ylim(40, 60) +  
    poster_theme + 
    scale_color_manual(values = c("Gain" = "gold", "Loss" = "coral"))
  
  
```
- in play 1, there is increased gambling in gain versus loss trials

# z-scored happiness by GAD and PHQ
```{r}
summary_zHappy_1 <- happyData1 %>%
    group_by(userKey) %>%
    summarise(
      mean_zHappy_filled = mean(zHappy_filled, na.rm=TRUE),
      sd_zHappy_filled = sd(zHappy_filled, na.rm = TRUE),
      rsd_Happy_filled = relSD_tc(zHappy, -2, 2),
      GAD_score = first(gad7_total),
      PHQ_score = first(phq8_total),
      GAD_bin = first(GAD_bin),
      PHQ_bin = first(PHQ_bin),
      gamble_decisions = sum(Choice == 2, na.rm = TRUE),
      total_decisions = n(),
      percent_gamble = (gamble_decisions / total_decisions) * 100,
      const = first(const1_multi_z),
      tau = first(tau_multi_z),
      rpe = first(rpe_chosen_multi_z),
      ev = first(ev_chosen_multi_z)
    ) 

### mean of z-scored happiness by GAD and PHQ bins
cor.test(summary_zHappy_1$mean_zHappy_filled,summary_zHappy_1$GAD_score,method="spearman") #n.s
cor.test(summary_zHappy_1$mean_zHappy_filled,summary_zHappy_1$PHQ_score,method="spearman") #n.s

### sd of z-scored happiness by GAD and PHQ bins (doesn't really make sense)
cor.test(summary_zHappy_1$sd_zHappy_filled,summary_zHappy_1$GAD_score,method="spearman") #n.s
cor.test(summary_zHappy_1$sd_zHappy_filled,summary_zHappy_1$PHQ_score,method="spearman") #n.s

### rsd of z-scored happiness by GAD and PHQ bins (doesn't really make sense)
cor.test(summary_zHappy_1$rsd_Happy_filled,summary_zHappy_1$GAD_score,method="spearman") #n.s
cor.test(summary_zHappy_1$rsd_Happy_filled,summary_zHappy_1$PHQ_score,method="spearman") #n.s


### plotting z-scored happiness across GAD bins
summary_bins <- summary_zHappy_1 %>%
    group_by(GAD_bin) %>%
    summarise(
      mean_z_Happy_filled = mean(mean_zHappy_filled, na.rm = TRUE),
      sem_sd_Happy_filled = sd(mean_zHappy_filled, na.rm = TRUE) / sqrt(n())
    ) %>% na.omit()

ggplot(summary_bins, aes(x = GAD_bin, y = mean_z_Happy_filled)) +
    geom_point(size = 3) +
    geom_errorbar(aes(ymin = mean_z_Happy_filled - sem_sd_Happy_filled, ymax = mean_z_Happy_filled + sem_sd_Happy_filled),
                  width = 0.2) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    labs(
      title = "Happiness by Anxiety (Play 1) N=5394",
      x = "Anxiety (GAD score)",
      y = "z-scored Happiness"
    ) +
    theme_minimal() +
    ylim(-0.02, 0.02) +
    poster_theme 

### splitting by domain
summary_zHappy_1 <- happyData1 %>%
    group_by(userKey,Trial) %>%
    summarise(
      mean_zHappy_filled = mean(zHappy_filled, na.rm=TRUE),
      sd_zHappy_filled = sd(zHappy_filled, na.rm = TRUE),
      rsd_Happy_filled = relSD_tc(zHappy, -2, 2),
      GAD_score = first(gad7_total),
      PHQ_score = first(phq8_total),
      GAD_bin = first(GAD_bin),
      PHQ_bin = first(PHQ_bin),
      gamble_decisions = sum(Choice == 2, na.rm = TRUE),
      total_decisions = n(),
      percent_gamble = (gamble_decisions / total_decisions) * 100,
      const = first(const1_multi_z),
      tau = first(tau_multi_z),
      rpe = first(rpe_chosen_multi_z),
      ev = first(ev_chosen_multi_z)
    ) 

summary_bins <- summary_zHappy_1 %>%
    group_by(GAD_bin,Trial) %>%
    summarise(
      mean_z_Happy_filled = mean(mean_zHappy_filled, na.rm = TRUE),
      sem_sd_Happy_filled = sd(mean_zHappy_filled, na.rm = TRUE) / sqrt(n())
    ) %>% na.omit()

ggplot(summary_bins, aes(x = GAD_bin, y = mean_z_Happy_filled, color=Trial)) +
    geom_point(size = 3) +
    geom_errorbar(aes(ymin = mean_z_Happy_filled - sem_sd_Happy_filled, ymax = mean_z_Happy_filled + sem_sd_Happy_filled),
                  width = 0.2) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    labs(
      title = "Happiness by Anxiety (Play 1) N=5394",
      x = "Anxiety (GAD score)",
      y = "z-scored Happiness"
    ) +
  scale_color_manual(values = c("Gain" = "gold", "Loss" = "coral")) + 
    theme_minimal() +
    ylim(-0.2, 0.2)+
    poster_theme 

### gain domain only
summary_gain <-summary_zHappy_1 %>%
  filter(Trial=="Gain")
cor.test(summary_gain$GAD_score,summary_gain$mean_zHappy_filled,method="spearman") #n.s
cor.test(summary_gain$PHQ_score,summary_gain$mean_zHappy_filled,method="spearman") #n.s


### loss domain only
summary_loss <- summary_zHappy_1 %>%
  filter(Trial=="Loss")
cor.test(summary_loss$GAD_score,summary_loss$mean_zHappy_filled,method="spearman") #n.s
cor.test(summary_loss$PHQ_score,summary_loss$mean_zHappy_filled,method="spearman") #n.s


```

# Happiness Model Parameters (4 Parameter EV+RPE Model)
### Summarizing Parameters and Plotting
```{r Summarizing Parameters and Plotting}

summary_params <- happyData1 %>%
    dplyr::select(ev_chosen_multi_z, rpe_chosen_multi_z) %>%
    pivot_longer(cols = c(ev_chosen_multi_z, rpe_chosen_multi_z), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit()
  
  # Generate the plot for ev rpe
  ggplot(summary_params, aes(x = parameter, y = mean_value)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, fill = "lightblue", color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 0.5) +
    labs(
      title = paste0("Play 3 Parameters (N=" ,sample_size, ")"),
      x = "Parameter",
      y = "Parameter Estimate"
    ) +
    theme_minimal() +
   poster_theme  + 
    scale_x_discrete(labels = c(
      "ev_chosen_multi_z" = "EV", 
      "rpe_chosen_multi_z" = "RPE"))
  

### split by GAD
summary_params <- happyData1 %>%
  dplyr::select(GAD_binary, ev_chosen_multi_z, rpe_chosen_multi_z) %>%
  group_by(GAD_binary) %>% 
    pivot_longer(cols = c(ev_chosen_multi_z, rpe_chosen_multi_z), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, GAD_binary) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = GAD_binary)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
    scale_fill_manual(values = c("GAD 6+" = "#00BD9D", "GAD <6" = "#8BD7D2")) +
    scale_x_discrete(labels = c("ev_chosen_multi_z" = "EV", "rpe_chosen_multi_z" = "RPE"))
  
  
### split by PHQ
  summary_params <- happyData1 %>%
  dplyr::select(PHQ_binary, ev_chosen_multi_z, rpe_chosen_multi_z) %>%
  group_by(PHQ_binary) %>% 
    pivot_longer(cols = c(ev_chosen_multi_z, rpe_chosen_multi_z), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, PHQ_binary) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = PHQ_binary)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
    scale_fill_manual(values = c("PHQ 7+" = "red", "PHQ <7" = "pink")) +
    scale_x_discrete(labels = c("ev_chosen_multi_z" = "EV", "rpe_chosen_multi_z" = "RPE"))
  
  
### GAD Bins
summary_params <- happyData1 %>%
  dplyr::select(GAD_bin, ev_chosen_multi_z, rpe_chosen_multi_z) %>%
  group_by(GAD_bin) %>% 
    pivot_longer(cols = c(ev_chosen_multi_z, rpe_chosen_multi_z), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, GAD_bin) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = GAD_bin)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
scale_fill_manual(values = c("0-4" = "#8BD7D2", "5-9" = "#6FACA8", "10-14" = "#53817E", "15-21" = "#385654")) +    scale_x_discrete(labels = c("ev_chosen_multi_z" = "EV", "rpe_chosen_multi_z" = "RPE"))
  
  
### PHQ bins
  summary_params <- happyData1 %>%
  dplyr::select(PHQ_bin, ev_chosen_multi_z, rpe_chosen_multi_z) %>%
  group_by(PHQ_bin) %>% 
    pivot_longer(cols = c(ev_chosen_multi_z, rpe_chosen_multi_z), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, PHQ_bin) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = PHQ_bin)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
scale_fill_manual(values = c("0-4" = "#FFC0CB", "5-9" = "#CC9AA2", "10-14" = "#99737A", "15-24" = "#664D51")) +    
    scale_x_discrete(labels = c("ev_chosen_multi_z" = "EV", "rpe_chosen_multi_z" = "RPE"))
  
```

### Plotting Parameters for 6 Parameter Model - Splitting by GAD and PHQ + Depression and Anxiety
```{r Summarizing Parameters and Plotting}

summary_params <- happyData1_6 %>%
    dplyr::select(ev_safe, rpe_safe, ev_risky, rpe_risky) %>%
    pivot_longer(cols = c(ev_safe, rpe_safe,ev_risky,rpe_risky), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit()
  
  # Generate the plot for ev rpe
  ggplot(summary_params, aes(x = parameter, y = mean_value)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, fill = "lightblue", color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 0.5) +
    labs(
      title = "Play 1 Parameters (N=5394)",
      x = "Parameter",
      y = "Parameter Estimate"
    ) +
    theme_minimal() +
   poster_theme 
  

### split by GAD
summary_params <- happyData1_6 %>%
  dplyr::select(GAD_binary, ev_safe, rpe_safe, ev_risky, rpe_risky) %>%
  group_by(GAD_binary) %>% 
    pivot_longer(cols = c(ev_safe, rpe_safe, ev_risky, rpe_risky), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, GAD_binary) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = GAD_binary)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
    scale_fill_manual(values = c("GAD 6+" = "#00BD9D", "GAD <6" = "#8BD7D2")) 

  
### split by PHQ
  summary_params <- happyData1_6 %>%
  dplyr::select(PHQ_binary, ev_safe, rpe_safe, ev_risky, rpe_risky) %>%
  group_by(PHQ_binary) %>% 
    pivot_longer(cols = c(ev_safe, rpe_safe, ev_risky, rpe_risky), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, PHQ_binary) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = PHQ_binary)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
    scale_fill_manual(values = c("PHQ 7+" = "red", "PHQ <7" = "pink")) 
  
### GAD Bins
summary_params <- happyData1_6 %>%
  dplyr::select(GAD_bin, ev_safe, rpe_safe, ev_risky, rpe_risky) %>%
  group_by(GAD_bin) %>% 
    pivot_longer(cols = c(ev_safe, rpe_safe, ev_risky, rpe_risky), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, GAD_bin) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = GAD_bin)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
scale_fill_manual(values = c("0-4" = "#8BD7D2", "5-9" = "#6FACA8", "10-14" = "#53817E", "15-21" = "#385654")) 
  
  
### PHQ bins
  summary_params <- happyData1_6 %>%
  dplyr::select(PHQ_bin, ev_safe, rpe_safe, ev_risky, rpe_risky) %>%
  group_by(PHQ_bin) %>% 
    pivot_longer(cols = c(ev_safe, rpe_safe, ev_risky, rpe_risky), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, PHQ_bin) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = PHQ_bin)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
scale_fill_manual(values = c("0-4" = "#FFC0CB", "5-9" = "#CC9AA2", "10-14" = "#99737A", "15-24" = "#664D51"))

```
```{r 4 parameter}

### split by anxiety
summary_params <- happyData1_diag %>%
  dplyr::select(diagnosis_anxiety, ev_chosen_multi_z, rpe_chosen_multi_z) %>%
  group_by(diagnosis_anxiety) %>% 
    pivot_longer(cols = c(ev_chosen_multi_z, rpe_chosen_multi_z), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, diagnosis_anxiety) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = diagnosis_anxiety)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
    scale_fill_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) 

  
### split by PHQ
  summary_params <- happyData1_diag %>%
  dplyr::select(diagnosis_depression,ev_chosen_multi_z, rpe_chosen_multi_z) %>%
  group_by(diagnosis_depression) %>% 
    pivot_longer(cols = c(ev_chosen_multi_z, rpe_chosen_multi_z), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, diagnosis_depression) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = diagnosis_depression)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
    scale_fill_manual(values = c("dep" = "coral", "no dep" = "pink")) 
```

```{r Diagnosis Split}
#diagnosis
happyData1_6_diag <- merge(happyData1_diag, params_multi, by="userKey")
  
### split by anxiety
summary_params <- happyData1_6_diag %>%
  dplyr::select(diagnosis_anxiety, ev_safe, rpe_safe, ev_risky, rpe_risky) %>%
  group_by(diagnosis_anxiety) %>% 
    pivot_longer(cols = c(ev_safe, rpe_safe, ev_risky, rpe_risky), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, diagnosis_anxiety) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = diagnosis_anxiety)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
    scale_fill_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) 

  
### split by PHQ
  summary_params <- happyData1_6_diag %>%
  dplyr::select(diagnosis_depression, ev_safe, rpe_safe, ev_risky, rpe_risky) %>%
  group_by(diagnosis_depression) %>% 
    pivot_longer(cols = c(ev_safe, rpe_safe, ev_risky, rpe_risky), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, diagnosis_depression) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = diagnosis_depression)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
    scale_fill_manual(values = c("dep" = "coral", "no dep" = "pink")) 
  

```

### correlations between 4 Parameters and Symptoms

```{r Correlations Between 4 Parameters and Symptoms}
# GAD and EV RPE
cor.test(summary_zHappy_1$GAD_score,summary_zHappy_1$rpe,method="spearman") #GAD and RPE negatively correlated (rho = -0.027, p=0.048)
cor.test(summary_zHappy_1$GAD_score,summary_zHappy_1$ev,method="spearman") #n.s. corr between anxiety and ev

# PHQ and EV RPE
cor.test(summary_zHappy_1$PHQ_score,summary_zHappy_1$rpe,method="spearman") #PHQ and RPE negatively correlated (rho=-0.039, p=0.005)
cor.test(summary_zHappy_1$PHQ_score,summary_zHappy_1$ev,method="spearman") #n.s. corr between depression and ev
```

- in play 1, PHQ and GAD are negatively associated with RPE (strongr effect for PHQ)

### Correlations between 6 Parameters and Symptoms

```{r Correlations Between 6 Parameters and Symptoms}
summary_6params <- happyData1_6 %>% 
  group_by(userKey) %>%
    summarise(
      mean_zHappy_filled = mean(zHappy_filled, na.rm=TRUE),
      sd_zHappy_filled = sd(zHappy_filled, na.rm = TRUE),
      rsd_Happy_filled = relSD_tc(zHappy, -2, 2),
      GAD_score = first(gad7_total),
      PHQ_score = first(phq8_total),
      GAD_bin = first(GAD_bin),
      PHQ_bin = first(PHQ_bin),
      gamble_decisions = sum(Choice == 2, na.rm = TRUE),
      total_decisions = n(),
      percent_gamble = (gamble_decisions / total_decisions) * 100,
      const_split = first(const_split),
      tau_split = first(tau_split),
      rpe_safe = first(rpe_safe),
      rpe_risky = first(rpe_risky),
      ev_safe = first(ev_safe),
      ev_risky = first(ev_risky),
      pattern_id = first(pattern_id),
    ) 
  
# GAD and EV RPE
cor.test(summary_6params$GAD_score,summary_6params$rpe_safe,method="spearman")
cor.test(summary_6params$GAD_score,summary_6params$ev_safe,method="spearman") 
cor.test(summary_6params$GAD_score,summary_6params$rpe_risky,method="spearman") 
cor.test(summary_6params$GAD_score,summary_6params$ev_risky,method="spearman") 
# PHQ and EV RPE
cor.test(summary_6params$PHQ_score,summary_6params$rpe_safe,method="spearman") 
cor.test(summary_6params$PHQ_score,summary_6params$ev_safe,method="spearman") 
cor.test(summary_6params$PHQ_score,summary_6params$rpe_risky,method="spearman") 
cor.test(summary_6params$PHQ_score,summary_6params$ev_risky,method="spearman")


```

#  Winning vs Losing Happiness (Taking a Risk in Gain and Loss Domain)
```{r Win v Loss Risky}
# Gain Domain
result <- winvloss_z_happy(happyData1, "Gain", "Risky")
result$summary_long
result$plot
result$wilcox_test 

### happier winning versus losing, but model underestimates unhappiness when losing in the gain domain

# Loss Domain
result <- winvloss_z_happy(happyData1, "Loss", "Risky")
result$summary_long
result$plot
result$wilcox_test 

### happier winning versys losing, model is underestimating happiness winning in a loss domain

```
- CHECK ASSOCIATIONS WITH ANXIETY AND DEPRESSION!

### Winning vs Losing Risky Choice Across GAD Groups
```{r GAD Group WinvLoss Happy}
### gain domain
result <- winvloss_z_happy_GAD(happyData1, "Gain", "Risky")
result$summary_long
result$plot
result$spearman_corr_win #n.s
result$spearman_corr_loss #rho=0.053, p=0.0004

### loss domain
result <- winvloss_z_happy_GAD(happyData1, "Loss", "Risky")
result$summary_long
result$plot
result$spearman_corr_win #rho=-0.036, p=0.009
result$spearman_corr_loss #n.s.
```
- people with the most severe anxiety are significantly happier when losing in gain domain compared to people with milder anxiety
- in loss domain, people with more severe anxiety are significantly less happy when winning compared to people with milder anxiety


### Winning vs Losing Safe Choice

```{r Win v Loss Safe}
# Gain Domain
result <- winvloss_z_happy(happyData1, "Gain", "Safe")
result$summary_long
result$plot
result$wilcox_test 

### happier winning versus losing, but model underestimates unhappiness when losing in the gain domain

# Loss Domain
result <- winvloss_z_happy(happyData1, "Loss", "Safe")
result$summary_long
result$plot
result$wilcox_test 

### happier winning versys losing, model is underestimating happiness winning in a loss domain

```
### Winnig vs Losing Safe Choice Across GAD groups 
```{r Win v Lose Safe GAD}
### gain domain
result <- winvloss_z_happy_GAD(happyData1, "Gain", "Safe")
result$summary_long
result$plot
result$spearman_corr_win #n.s
result$spearman_corr_loss #rho=0.053, p=0.0004

### loss domain
result <- winvloss_z_happy_GAD(happyData1, "Loss", "Safe")
result$summary_long
result$plot
result$spearman_corr_win #rho=-0.036, p=0.009
result$spearman_corr_loss #n.s.
```

# Future Information
### Risky Choices based on Future Information

```{r Risky Choices based on Future Information}
positive_risky <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2) %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Future = "Positive")
  
  # Calculate mean happiness and predicted happiness for NextIsland == 1 within subjects
negative_risky <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1) %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Future = "Negative")
  
  # Combine results
combined_risky <- bind_rows(positive_risky, negative_risky)
summary_combined <- combined_risky %>%
  group_by(Future) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Future, y = mean_risky, color = Future)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("Positive" = "#FFD700", "Negative" = "#FF6347")) +
    labs(
      title = "% Risky Choices based on Future (Play 2) N=1922",
      x = "Future",
      y = "% Risky Choices"
    ) +
    ylim(40,70) + 
    theme_minimal() +
    poster_theme 
  
  # people choose to gamble more when the future is positive 
  
  #GAD
  positive_risky <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2) %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(GAD_binary) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive")
  
  # non-paramateric t-test
  positive_risky_sig <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2) %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
            GAD_score = first(gad7_total),
              .groups = 'drop')
  
  wilcox.test(positive_risky_sig$percent_risky~positive_risky_sig$GAD_binary)
  cor.test(positive_risky_sig$percent_risky,positive_risky_sig$GAD_score,method="spearman")
# no significant difference between GAD groups in risk taking when future is positive
  
  # Calculate mean happiness and predicted happiness for NextIsland == 1 within subjects
negative_risky <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1) %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(GAD_binary) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative")

negative_risky_sig <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1) %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
            GAD_score = first(gad7_total),
              .groups = 'drop')
  
  wilcox.test(negative_risky_sig$percent_risky~negative_risky_sig$GAD_binary)
    cor.test(negative_risky_sig$percent_risky,negative_risky_sig$GAD_score,method="spearman")

  

  # Combine results
combined_risky <- bind_rows(positive_risky, negative_risky)
combined_risky <- na.omit(combined_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = GAD_binary, group = GAD_binary)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("GAD 6+" = "#00BD9D", "GAD <6" = "#8BD7D2")) +
    labs(
      title = "% Risky Choices based on Future (Play 2) N=1922",
      x = "Future",
      y = "% Risky Choices"
    ) +
    ylim(40,70) + 
    theme_minimal() +
    poster_theme 
  
   # GAD Bin
  
 positive_risky <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & !is.na(GAD_bin)) %>%
  group_by(userKey,GAD_bin) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(GAD_bin) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive")
    
    
  
  negative_risky <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & !is.na(GAD_bin)) %>%
  group_by(userKey,GAD_bin) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(GAD_bin) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative")


  # Combine results
combined_risky <- bind_rows(positive_risky, negative_risky)
combined_risky <- na.omit(combined_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = GAD_bin, group = GAD_bin)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_color_manual(values = c("0-4" = "#8BD7D2", "5-9" = "#6FACA8", "10-14" = "#53817E", "15-21" = "#385654")) +
    labs(
      title = "% Risky Choices based on Future (Play 4) N=1922",
      x = "Future",
      y = "% Risky Choices"
    ) +
        ylim(40,70) +
    theme_minimal() +
    poster_theme 
  
  # PHQ binary
  
  positive_risky <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2) %>%
  group_by(userKey,PHQ_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(PHQ_binary) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive")
  
  # non-paramateric t-test
  positive_risky_sig <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2) %>%
  group_by(userKey,PHQ_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
            PHQ_score = first(phq8_total),
              .groups = 'drop')
  
  wilcox.test(positive_risky_sig$percent_risky~positive_risky_sig$PHQ_binary)
  cor.test(positive_risky_sig$percent_risky,positive_risky_sig$PHQ_score,method="spearman")

  # Calculate mean happiness and predicted happiness for NextIsland == 1 within subjects
negative_risky <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1) %>%
  group_by(userKey,PHQ_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(PHQ_binary) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative")

negative_risky_sig <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1) %>%
  group_by(userKey,PHQ_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
            PHQ_score = first(phq8_total),
              .groups = 'drop')
  
  wilcox.test(negative_risky_sig$percent_risky~negative_risky_sig$PHQ_binary)
    cor.test(negative_risky_sig$percent_risky,negative_risky_sig$PHQ_score,method="spearman")

  

  # Combine results
combined_risky <- bind_rows(positive_risky, negative_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = PHQ_binary, group = PHQ_binary)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("PHQ 7+" = "red", "PHQ <7" = "pink")) +
    labs(
      title = "% Risky Choices based on Future (Play 4) N=1922",
      x = "Future",
      y = "% Risky Choices"
    ) +
    ylim(40,70) +
    theme_minimal() +
    poster_theme 
  
  # PHQ Bin
  
 positive_risky <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & !is.na(PHQ_bin)) %>%
  group_by(userKey,PHQ_bin) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(PHQ_bin) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive")
    
    
  
  negative_risky <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & !is.na(PHQ_bin)) %>%
  group_by(userKey,PHQ_bin) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(PHQ_bin) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative")


  # Combine results
combined_risky <- bind_rows(positive_risky, negative_risky)
combined_risky <- na.omit(combined_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = PHQ_bin, group = PHQ_bin)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
      scale_color_manual(values = c("0-4" = "#FFC0CB", "5-9" = "#CC9AA2", "10-14" = "#99737A", "15-24" = "#664D51")) +
    labs(
      title = "% Risky Choices based on Future (Play 4) N=1922",
      x = "Future",
      y = "% Risky Choices"
    ) +
        ylim(40,70) +
    theme_minimal() +
    poster_theme 
```

### Happiness Based on Future and Current Domain
```{r Happiness Based on Future and Current Domain}
current_pos_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy_filled, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred_filled, na.rm = TRUE), 
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Gain") %>%
    group_by(Future, Current) %>%
  summarise(overall_mean_happiness = mean(mean_happiness),
            sem_happiness = sd(mean_happiness)/sqrt(n())) 

current_pos_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey, ) %>%
  summarise(mean_happiness = mean(zHappy_filled, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred_filled, na.rm = TRUE), 
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Gain")  %>%
    group_by(Future, Current) %>%
  summarise(overall_mean_happiness = mean(mean_happiness),
            sem_happiness = sd(mean_happiness)/sqrt(n())) 

current_neg_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy_filled, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred_filled, na.rm = TRUE), 
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Loss")  %>%
    group_by(Future, Current) %>%
  summarise(overall_mean_happiness = mean(mean_happiness),
            sem_happiness = sd(mean_happiness)/sqrt(n())) 

current_neg_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1., Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy_filled, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred_filled, na.rm = TRUE), 
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Loss")  %>%
    group_by(Future, Current) %>%
  summarise(overall_mean_happiness = mean(mean_happiness),
            sem_happiness = sd(mean_happiness)/sqrt(n())) 


  # Combine results
combined_happy <- bind_rows(current_pos_future_pos, current_pos_future_neg, current_neg_future_pos,current_neg_future_neg)
combined_happy <- na.omit(combined_happy)

# overall
 ggplot(combined_happy, aes(x = Future, y = overall_mean_happiness, fill = Current,group=Future)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black",group="Future") +
     geom_errorbar(aes(ymin = overall_mean_happiness - sem_happiness, ymax = overall_mean_happiness + sem_happiness),
                  position = position_dodge(0.7), width = 0.2,group="Future") +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_fill_manual(values = c("Gain" = "gold", "Loss" = "coral")) +
    labs(
      title = "z-scored Happiness based on Future and Current",
      x = "Future",
      y = "z-scored Happiness"
    ) +
    theme_minimal() +
    poster_theme 

 
 ### GAD
 
current_pos_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey, GAD_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(GAD_binary) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Gain")

#t.test
current_pos_future_pos_sig <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey, GAD_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            GAD_score=first(gad7_total),
            .groups = 'drop'
            )
  wilcox.test(current_pos_future_pos_sig$mean_happiness~current_pos_future_pos_sig$GAD_binary)
      cor.test(current_pos_future_pos_sig$mean_happiness,current_pos_future_pos_sig$GAD_score,method="spearman")

current_pos_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey, GAD_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(GAD_binary) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Gain")

#t.test
current_pos_future_neg_sig <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey, GAD_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            GAD_score=first(gad7_total),
            .groups = 'drop')
  wilcox.test(current_pos_future_neg_sig$mean_happiness~current_pos_future_neg_sig$GAD_binary)
        cor.test(current_pos_future_neg_sig$mean_happiness,current_pos_future_neg_sig$GAD_score,method="spearman")

current_neg_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey, GAD_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(GAD_binary) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Loss")

#t.test
current_neg_future_pos_sig <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Loss") %>%
  group_by(userKey, GAD_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            GAD_score=first(gad7_total),
            .groups = 'drop')
  wilcox.test(current_neg_future_pos_sig$mean_happiness~current_neg_future_pos_sig$GAD_binary)
        cor.test(current_neg_future_pos_sig$mean_happiness,current_neg_future_pos_sig$GAD_score,method="spearman")

current_neg_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1., Trial == "Loss") %>%
  group_by(userKey, GAD_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(GAD_binary) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Loss")

#t.test
current_neg_future_neg_sig <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Loss") %>%
  group_by(userKey, GAD_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            GAD_score=first(gad7_total),
            .groups = 'drop')
  wilcox.test(current_neg_future_neg_sig$mean_happiness~current_neg_future_neg_sig$GAD_binary)
          cor.test(current_neg_future_neg_sig$mean_happiness,current_neg_future_neg_sig$GAD_score,method="spearman")

  # Combine results
combined_happy <- bind_rows(current_pos_future_pos, current_pos_future_neg, current_neg_future_pos,current_neg_future_neg)
combined_happy <- na.omit(combined_happy)



 ggplot(combined_happy, aes(x = Future, y = overall_mean_happiness, fill = GAD_binary, group=GAD_binary)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = overall_mean_happiness - sem_happiness, ymax = overall_mean_happiness + sem_happiness),
                  position = position_dodge(0.7), width = 0.2) +
    geom_point(aes(y = overall_mean_pred_happiness), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_fill_manual(values = c("GAD 6+" = "#00BD9D", "GAD <6" = "#8BD7D2")) +
    labs(
      title = "z-scored Happiness based on Future and Current",
      x = "Future",
      y = "z-scored Happiness"
    ) +
   facet_wrap(~Current) +
    theme_minimal() +
    poster_theme 
 
 
 ## GAD BINS - fill= Current, wrap~GAD_bin
 
 current_pos_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey, GAD_bin) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(GAD_bin) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Gain")
 
 current_pos_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey, GAD_bin) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(GAD_bin) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Gain")
 
 current_neg_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey, GAD_bin) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(GAD_bin) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Loss")
 
 current_neg_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1., Trial == "Loss") %>%
  group_by(userKey, GAD_bin) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(GAD_bin) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Loss")
 
 # Combine results
combined_happy <- bind_rows(current_pos_future_pos, current_pos_future_neg, current_neg_future_pos,current_neg_future_neg)
combined_happy <- na.omit(combined_happy)

 ggplot(combined_happy, aes(x = Future, y = overall_mean_happiness, fill = GAD_bin, group=GAD_bin)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = overall_mean_happiness - sem_happiness, ymax = overall_mean_happiness + sem_happiness),
                  position = position_dodge(0.7), width = 0.2) +
    geom_point(aes(y = overall_mean_pred_happiness), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_fill_manual(values = c("0-4" = "#8BD7D2", "5-9" = "#6FACA8", "10-14" = "#53817E", "15-21" = "#385654")) +
    labs(
      title = "z-scored Happiness based on Future and Current",
      x = "Future",
      y = "z-scored Happiness"
    ) +
   facet_grid(~Current) +
    theme_minimal() +
    poster_theme 
 
 
 
 
 
 
 
 ### PHQ
 current_pos_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey, PHQ_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(PHQ_binary) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Gain")

#t.test
current_pos_future_pos_sig <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey, PHQ_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            PHQ_score=first(phq8_total),
            .groups = 'drop'
            )
  wilcox.test(current_pos_future_pos_sig$mean_happiness~current_pos_future_pos_sig$PHQ_binary)
      cor.test(current_pos_future_pos_sig$mean_happiness,current_pos_future_pos_sig$PHQ_score,method="spearman")

current_pos_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey, PHQ_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(PHQ_binary) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Gain")

#t.test
current_pos_future_neg_sig <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey, PHQ_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            PHQ_score=first(phq8_total),
            .groups = 'drop')
  wilcox.test(current_pos_future_neg_sig$mean_happiness~current_pos_future_neg_sig$PHQ_binary)
        cor.test(current_pos_future_neg_sig$mean_happiness,current_pos_future_neg_sig$PHQ_score,method="spearman")

current_neg_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey, PHQ_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(PHQ_binary) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Loss")

#t.test
current_neg_future_pos_sig <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Loss") %>%
  group_by(userKey, PHQ_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            PHQ_score=first(phq8_total),
            .groups = 'drop')
  wilcox.test(current_neg_future_pos_sig$mean_happiness~current_neg_future_pos_sig$PHQ_binary)
        cor.test(current_neg_future_pos_sig$mean_happiness,current_neg_future_pos_sig$PHQ_score,method="spearman")

current_neg_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1., Trial == "Loss") %>%
  group_by(userKey, PHQ_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(PHQ_binary) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Loss")

#t.test
current_neg_future_neg_sig <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Loss") %>%
  group_by(userKey, PHQ_binary) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            PHQ_score=first(phq8_total),
            .groups = 'drop')
  wilcox.test(current_neg_future_neg_sig$mean_happiness~current_neg_future_neg_sig$PHQ_binary)
          cor.test(current_neg_future_neg_sig$mean_happiness,current_neg_future_neg_sig$PHQ_score,method="spearman")

  # Combine results
combined_happy <- bind_rows(current_pos_future_pos, current_pos_future_neg, current_neg_future_pos,current_neg_future_neg)
combined_happy <- na.omit(combined_happy)

 ggplot(combined_happy, aes(x = Future, y = overall_mean_happiness, fill = PHQ_binary, group=PHQ_binary)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = overall_mean_happiness - sem_happiness, ymax = overall_mean_happiness + sem_happiness),
                  position = position_dodge(0.7), width = 0.2) +
    geom_point(aes(y = overall_mean_pred_happiness), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_fill_manual(values = c("PHQ 7+" = "red", "PHQ <7" = "pink")) +
    labs(
      title = "z-scored Happiness based on Future and Current",
      x = "Future",
      y = "z-scored Happiness"
    ) +
   facet_wrap(~Current) +
    theme_minimal() +
    poster_theme 
 
 
 ## GAD BINS - fill= Current, wrap~PHQ_bin
 
 current_pos_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey, PHQ_bin) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(PHQ_bin) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Gain")
 
 current_pos_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey, PHQ_bin) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(PHQ_bin) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Gain")
 
 current_neg_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey, PHQ_bin) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(PHQ_bin) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Loss")
 
 current_neg_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1., Trial == "Loss") %>%
  group_by(userKey, PHQ_bin) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(PHQ_bin) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Loss")
 
 # Combine results
combined_happy <- bind_rows(current_pos_future_pos, current_pos_future_neg, current_neg_future_pos,current_neg_future_neg)
combined_happy <- na.omit(combined_happy)

 ggplot(combined_happy, aes(x = Future, y = overall_mean_happiness, fill = PHQ_bin, group=PHQ_bin)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = overall_mean_happiness - sem_happiness, ymax = overall_mean_happiness + sem_happiness),
                  position = position_dodge(0.7), width = 0.2) +
    geom_point(aes(y = overall_mean_pred_happiness), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
      scale_fill_manual(values = c("0-4" = "#FFC0CB", "5-9" = "#CC9AA2", "10-14" = "#99737A", "15-24" = "#664D51")) +
    labs(
      title = "z-scored Happiness based on Future and Current",
      x = "Future",
      y = "z-scored Happiness"
    ) +
   facet_grid(~Current) +
    theme_minimal() +
    poster_theme 
 
```
### Within Groups Analyses - Happiness based on Future and Current Domain
```{r Happiness Based on Future and Current - Within Groups Analysis}
# Comparing happiness when future is positive versus negative within GAD GROUPS in GAIN DOMAIN
gain_data <- happyData1 %>%
  filter(Trial == "Gain", !is.na(GAD_binary)) %>%
  group_by(userKey, GAD_binary, Future = ifelse(NextIsland == 2 & LastIsland == 2, "Positive", "Negative")) %>%
  summarise(
    mean_happiness = mean(zHappy, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Future, values_from = mean_happiness)

gain_ANX <- gain_data %>%
  filter(GAD_binary == "GAD 6+")

gain_ANX_long <- gain_ANX %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "mean_happiness"     # New column for percent risky choices
  )


wilcox.test(gain_ANX_long$mean_happiness~gain_ANX_long$Future,paired=FALSE)



gain_lowANX <- gain_data %>%
  filter(GAD_binary == "GAD <6")

gain_lowANX_long <- gain_lowANX %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "mean_happiness"     # New column for percent risky choices
  )

wilcox.test(gain_lowANX_long$mean_happiness~gain_lowANX_long$Future,paired=FALSE)

#loss
loss_data <- happyData1 %>%
  filter(Trial == "Loss", !is.na(GAD_binary)) %>%
  group_by(userKey, GAD_binary, Future = ifelse(NextIsland == 2 & LastIsland == 2, "Positive", "Negative")) %>%
  summarise(
    mean_happiness = mean(zHappy, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Future, values_from = mean_happiness)

loss_ANX <- loss_data %>%
  filter(GAD_binary == "GAD 6+")

loss_ANX_long <- loss_ANX %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "mean_happiness"     # New column for percent risky choices
  )


wilcox.test(loss_ANX_long$mean_happiness~loss_ANX_long$Future,paired=FALSE)



loss_lowANX <- loss_data %>%
  filter(GAD_binary == "GAD <6")

loss_lowANX_long <- loss_lowANX %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "mean_happiness"     # New column for percent risky choices
  )

wilcox.test(loss_lowANX_long$mean_happiness~loss_lowANX_long$Future,paired=FALSE)




# Comparing happiness when future is Positive in Gain vs Loss Domain

positive_future_data <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2, !is.na(GAD_binary)) %>%  # Filter for Positive future
  group_by(userKey, GAD_binary, Domain = ifelse(Trial == "Gain", "Gain", "Loss")) %>%
  summarise(
   mean_happiness = mean(zHappy, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Domain, values_from = mean_happiness)

positive_future_long <- positive_future_data %>%
  pivot_longer(
    cols = c(Gain, Loss),  # Columns to pivot
    names_to = "Domain",   # New column for domain condition (Gain vs Loss)
    values_to = "mean_happiness"  # New column for percent risky choices
  ) %>%
  drop_na(mean_happiness)  # Remove any rows with NA values in percent_risky

positive_future_anx <- positive_future_long %>%
  filter(GAD_binary == "GAD 6+")

wilcox.test(mean_happiness ~ Domain, data = positive_future_anx, paired = FALSE)

# Repeat for GAD <5 group
positive_future_non_anx <- positive_future_long %>%
  filter(GAD_binary == "GAD <6")

wilcox.test(mean_happiness ~ Domain,  data = positive_future_non_anx, paired =FALSE)


# When future is negaative in gain vs loss domain
negative_future_data <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1, !is.na(GAD_binary)) %>%  # Filter for Positive future
  group_by(userKey, GAD_binary, Domain = ifelse(Trial == "Gain", "Gain", "Loss")) %>%
  summarise(
   mean_happiness = mean(zHappy, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Domain, values_from = mean_happiness)

negative_future_long <- negative_future_data %>%
  pivot_longer(
    cols = c(Gain, Loss),  # Columns to pivot
    names_to = "Domain",   # New column for domain condition (Gain vs Loss)
    values_to = "mean_happiness"  # New column for percent risky choices
  ) %>%
  drop_na(mean_happiness)  # Remove any rows with NA values in percent_risky

negative_future_anx <- negative_future_long %>%
  filter(GAD_binary == "GAD 6+")

wilcox.test(mean_happiness ~ Domain, data = negative_future_anx, paired = FALSE)

# Repeat for GAD <5 group
negative_future_non_anx <- negative_future_long %>%
  filter(GAD_binary == "GAD <6")

wilcox.test(mean_happiness ~ Domain,  data = negative_future_non_anx, paired =FALSE)





### PHQ 

# Comparing happiness when future is positive versus negative within GAD GROUPS in GAIN DOMAIN
gain_data <- happyData1 %>%
  filter(Trial == "Gain", !is.na(PHQ_binary)) %>%
  group_by(userKey, PHQ_binary, Future = ifelse(NextIsland == 2 & LastIsland == 2, "Positive", "Negative")) %>%
  summarise(
    mean_happiness = mean(zHappy, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Future, values_from = mean_happiness)

gain_DEP <- gain_data %>%
  filter(PHQ_binary == "PHQ 7+")

gain_DEP_long <- gain_DEP %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "mean_happiness"     # New column for percent risky choices
  )


wilcox.test(gain_DEP_long$mean_happiness~gain_DEP_long$Future,paired=FALSE)



gain_lowDEP <- gain_data %>%
  filter(PHQ_binary == "PHQ <7")

gain_lowDEP_long <- gain_lowDEP %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "mean_happiness"     # New column for percent risky choices
  )

wilcox.test(gain_lowDEP_long$mean_happiness~gain_lowDEP_long$Future,paired=FALSE)

#loss
loss_data <- happyData1 %>%
  filter(Trial == "Loss", !is.na(PHQ_binary)) %>%
  group_by(userKey, PHQ_binary, Future = ifelse(NextIsland == 2 & LastIsland == 2, "Positive", "Negative")) %>%
  summarise(
    mean_happiness = mean(zHappy, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Future, values_from = mean_happiness)

loss_DEP <- loss_data %>%
  filter(PHQ_binary == "PHQ 7+")

loss_DEP_long <- loss_DEP %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "mean_happiness"     # New column for percent risky choices
  )


wilcox.test(loss_DEP_long$mean_happiness~loss_DEP_long$Future,paired=FALSE)



loss_lowDEP <- loss_data %>%
  filter(PHQ_binary == "PHQ <7")

loss_lowDEP_long <- loss_lowDEP %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "mean_happiness"     # New column for percent risky choices
  )

wilcox.test(loss_lowDEP_long$mean_happiness~loss_lowDEP_long$Future,paired=FALSE)




# Comparing happiness when future is Positive in Gain vs Loss Domain

positive_future_data <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2, !is.na(PHQ_binary)) %>%  # Filter for Positive future
  group_by(userKey, PHQ_binary, Domain = ifelse(Trial == "Gain", "Gain", "Loss")) %>%
  summarise(
   mean_happiness = mean(zHappy, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Domain, values_from = mean_happiness)

positive_future_long <- positive_future_data %>%
  pivot_longer(
    cols = c(Gain, Loss),  # Columns to pivot
    names_to = "Domain",   # New column for domain condition (Gain vs Loss)
    values_to = "mean_happiness"  # New column for percent risky choices
  ) %>%
  drop_na(mean_happiness)  # Remove any rows with NA values in percent_risky

positive_future_dep <- positive_future_long %>%
  filter(PHQ_binary == "PHQ 7+")

wilcox.test(mean_happiness ~ Domain, data = positive_future_dep, paired = FALSE)

# Repeat for GAD <5 group
positive_future_non_dep <- positive_future_long %>%
  filter(PHQ_binary == "PHQ <7")

wilcox.test(mean_happiness ~ Domain,  data = positive_future_non_dep, paired =FALSE)


# When future is negaative in gain vs loss domain
negative_future_data <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1, !is.na(PHQ_binary)) %>%  # Filter for Positive future
  group_by(userKey, PHQ_binary, Domain = ifelse(Trial == "Gain", "Gain", "Loss")) %>%
  summarise(
   mean_happiness = mean(zHappy, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Domain, values_from = mean_happiness)

negative_future_long <- negative_future_data %>%
  pivot_longer(
    cols = c(Gain, Loss),  # Columns to pivot
    names_to = "Domain",   # New column for domain condition (Gain vs Loss)
    values_to = "mean_happiness"  # New column for percent risky choices
  ) %>%
  drop_na(mean_happiness)  # Remove any rows with NA values in percent_risky

negative_future_dep <- negative_future_long %>%
  filter(PHQ_binary == "PHQ 7+")

wilcox.test(mean_happiness ~ Domain, data = negative_future_dep, paired = FALSE)

# Repeat for GAD <5 group
negative_future_non_dep <- negative_future_long %>%
  filter(PHQ_binary == "PHQ <7")

wilcox.test(mean_happiness ~ Domain,  data = negative_future_non_dep, paired =FALSE)
```

### Happiness Based on Future and Current Domain (Differences Analysis)

```{r Happiness Based on Future and Current Domain - Differences}
happyData1 <- happyData1 %>%
  mutate(Future=case_when(NextIsland==2 & LastIsland==2 ~ "Positive",
                   NextIsland==1 & LastIsland==1 ~ "Negative"))

happiness_gain <- happyData1 %>%
  filter(Trial == "Gain") %>%
  group_by(userKey, Future) %>%
  summarise(mean_zHappy = mean(zHappy_filled, na.rm = TRUE), 
            GAD_score = first(gad7_total),
            PHQ_score = first(phq8_total), .groups = 'drop') %>%
  na.omit()

happiness_gain_diff <- happiness_gain %>%
  spread(key = Future, value = mean_zHappy) %>%
  mutate(happy_diff = Positive - Negative)  


cor.test(happiness_gain_diff$happy_diff, happiness_gain_diff$GAD_score, method="spearman")
cor.test(happiness_gain_diff$happy_diff, happiness_gain_diff$PHQ_score,method="spearman")

# no correlation between GAD or PHQ and the difference in happiness when the future is positive vs negative in gain domain


happiness_loss <- happyData1 %>%
  filter(Trial == "Loss") %>%
  group_by(userKey, Future) %>%
  summarise(mean_zHappy = mean(zHappy_filled, na.rm = TRUE), 
            GAD_score = first(gad7_total),
            PHQ_score = first(phq8_total), .groups = 'drop') %>%
  na.omit()

happiness_loss_diff <- happiness_loss %>%
  spread(key = Future, value = mean_zHappy) %>%
  mutate(happy_diff = Positive - Negative)  


cor.test(happiness_loss_diff$happy_diff, happiness_loss_diff$GAD_score, method="spearman")
cor.test(happiness_loss_diff$happy_diff, happiness_loss_diff$PHQ_score, method="spearman")


# no correlation in loss domain either


# plot
happiness_domains <- happyData1 %>%
  filter(Trial %in% c("Gain", "Loss")) %>%
  group_by(userKey, Trial, Future) %>%
  summarise(mean_zHappy = mean(zHappy_filled, na.rm = TRUE), .groups = 'drop')

happiness_diff_domains <- happiness_domains %>%
  spread(key = Future, value = mean_zHappy) %>%
  mutate(happy_diff = Positive - Negative)  

happiness_summary <- happiness_diff_domains %>%
  group_by(Trial) %>%
  summarise(mean_happy_diff = mean(happy_diff, na.rm = TRUE),
            sem_happy_diff = sd(happy_diff, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop')

# Step 4: Create the bar plot
ggplot(happiness_summary, aes(x = Trial, y = mean_happy_diff, fill = Trial)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black") +
  geom_errorbar(aes(ymin = mean_happy_diff - sem_happy_diff, ymax = mean_happy_diff + sem_happy_diff),
                width = 0.2, position = position_dodge(0.7)) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
  labs(
    title = "Difference in zHappy between Positive and Negative Future by Domain",
    x = "Domain",
    y = "Mean zHappy Difference (Positive - Negative)"
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +
  poster_theme

# greater difference in happiness when the future is positive - negative in loss domain
# i.e., in loss domains, people are less happy when the future is positive versus negative


## positive future gain-loss domain happiness difference
happiness_positive <- happyData1 %>%
  filter(Future == "Positive") %>%
  group_by(userKey, Trial) %>%
  summarise(mean_zHappy = mean(zHappy_filled, na.rm = TRUE), 
            GAD_score = first(gad7_total),
            PHQ_score = first(phq8_total), .groups = 'drop') %>%
  na.omit()

happiness_gain_diff <- happiness_positive %>%
  spread(key = Trial, value = mean_zHappy) %>%
  mutate(happy_diff = Gain - Loss)  


cor.test(happiness_gain_diff$happy_diff, happiness_gain_diff$GAD_score, method="spearman")
cor.test(happiness_gain_diff$happy_diff, happiness_gain_diff$PHQ_score,method="spearman")



happiness_negative <- happyData1 %>%
  filter(Future == "Negative") %>%
  group_by(userKey, Trial) %>%
  summarise(mean_zHappy = mean(zHappy_filled, na.rm = TRUE), 
            GAD_score = first(gad7_total),
            PHQ_score = first(phq8_total), .groups = 'drop') %>%
  na.omit()

happiness_gain_diff <- happiness_negative %>%
  spread(key = Trial, value = mean_zHappy) %>%
  mutate(happy_diff = Gain - Loss)  


cor.test(happiness_gain_diff$happy_diff, happiness_gain_diff$GAD_score, method="spearman")
cor.test(happiness_gain_diff$happy_diff, happiness_gain_diff$PHQ_score,method="spearman")


```


### Risky Choices Based on Future and Current Domain

```{r Risky Choice Based on Future and Current}
current_pos_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Gain")

current_pos_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Gain")
  
current_neg_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Loss")

current_neg_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1., Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Loss")
  
  # Combine results
combined_risky <- bind_rows(current_pos_future_pos, current_pos_future_neg, current_neg_future_pos,current_neg_future_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Future) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Future, y = mean_risky, color = Current)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +
    labs(
      title = "% Risky Choices based on Current and Future (Play 2)",
      x = "Future",
      y = "% Risky Choices"
    ) +
    ylim(40,70) + 
    theme_minimal() +
    poster_theme 
  
  # people choose to take risks more when the future is positive, and they are currently in a gain domain
  # people choose to take the risk the least when the future is negative and they are currently in the loss domain
```

```{r Risky Choice Based on Future and Current - NextIsland only}
sample_size = length(unique(happyData1$userKey))
current_pos_future_pos <- happyData1 %>%
  filter(NextIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Gain")

current_pos_future_neg <- happyData1 %>%
  filter(NextIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Gain")
  
current_neg_future_pos <- happyData1 %>%
  filter(NextIsland == 2 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Loss")

current_neg_future_neg <- happyData1 %>%
  filter(NextIsland == 1, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Loss")
  
  # Combine results
combined_risky <- bind_rows(current_pos_future_pos, current_pos_future_neg, current_neg_future_pos,current_neg_future_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Future) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Future, y = mean_risky, color = Current)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +
    labs(
title = paste0("% Risky Choices based on Future (N=", sample_size, ")"),
      x = "Future",
      y = "% Risky Choices"
    ) +
    ylim(40,70) + 
    theme_minimal() +
    poster_theme 
  
  # people choose to take risks more when the future is positive, and they are currently in a gain domain
  # people choose to take the risk the least when the future is negative and they are currently in the loss domain
```

### Risky Choices Based on Future and Current - Split by GAD 
```{r Risky Choices Based on Future and Current - GAD Split}

#GAD
current_pos_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(GAD_binary) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Gain")

#t.test
current_pos_future_pos_sig <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
            GAD_score = first(gad7_total),
              .groups = 'drop') 
  wilcox.test(current_pos_future_pos_sig$percent_risky~current_pos_future_pos_sig$GAD_binary)
  cor.test(current_pos_future_pos_sig$percent_risky,current_pos_future_pos_sig$GAD_score,method="spearman")


current_pos_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(GAD_binary) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Gain")
# t.test
current_pos_future_neg_sig <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
            GAD_score = first(gad7_total),
              .groups = 'drop') 
  wilcox.test(current_pos_future_neg_sig$percent_risky~current_pos_future_neg_sig$GAD_binary)
    cor.test(current_pos_future_neg_sig$percent_risky,current_pos_future_neg_sig$GAD_score,method="spearman")

current_neg_future_pos <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(GAD_binary) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Loss")

#t.test
current_neg_future_pos_sig <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Loss") %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
            GAD_score = first(gad7_total),
              .groups = 'drop')  
  wilcox.test(current_neg_future_pos_sig$percent_risky~current_neg_future_pos_sig$GAD_binary)
    cor.test(current_neg_future_pos_sig$percent_risky,current_neg_future_pos_sig$GAD_score,method="spearman")

    
current_neg_future_neg <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1, Trial == "Loss") %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(GAD_binary) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Loss")

#t.test
current_neg_future_neg_sig <- happyData1 %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Loss") %>%
  group_by(userKey,GAD_binary) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
            GAD_score = first(gad7_total),
              .groups = 'drop')  
  wilcox.test(current_neg_future_neg_sig$percent_risky~current_neg_future_neg_sig$GAD_binary)
      cor.test(current_neg_future_neg_sig$percent_risky,current_neg_future_neg_sig$GAD_score,method="spearman")

      
  # Combine results
combined_risky <- bind_rows(current_pos_future_pos, current_pos_future_neg,current_neg_future_pos,current_neg_future_neg)
combined_risky <- na.omit(combined_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = GAD_binary, group = Current)) +
    geom_point(position = position_dodge(1), width = 0.7,group="GAD_binary") +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(1), width = 0.2, group="GAD_binary") + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("GAD 6+" = "#00BD9D", "GAD <6" = "#8BD7D2")) +
    labs(
      title = "% Risky Choices based on Future (Play 1) N=5393",
      x = "Future",
      y = "% Risky Choices"
    ) +
    facet_wrap(~Current) +
    ylim(40,70) + 
    theme_minimal() +
    poster_theme 
```

### Within Groups Analysis _ Risky Choices Based on Future and Current

```{r Risky Choices Based on Future and Current - Within Groups}
# Comparing risky choices when future is positive versus negative within GAD GROUPS in GAIN DOMAIN
gain_data <- happyData1 %>%
  filter(Trial == "Gain", !is.na(GAD_binary)) %>%
  group_by(userKey, GAD_binary, Future = ifelse(NextIsland == 2 & LastIsland == 2, "Positive", "Negative")) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Future, values_from = percent_risky)

gain_ANX <- gain_data %>%
  filter(GAD_binary == "GAD 6+")

gain_ANX_long <- gain_ANX %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "percent_risky"     # New column for percent risky choices
  )

wilcox.test(gain_ANX_long$percent_risky~gain_ANX_long$Future,paired=FALSE)


gain_lowANX <- gain_data %>%
  filter(GAD_binary == "GAD <6")

gain_lowANX_long <- gain_lowANX %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "percent_risky"     # New column for percent risky choices
  )


wilcox.test(gain_lowANX_long$percent_risky~gain_lowANX_long$Future,paired=FALSE)


## loss domain
loss_data <- happyData1 %>%
  filter(Trial == "Loss", !is.na(GAD_binary)) %>%
  group_by(userKey, GAD_binary, Future = ifelse(NextIsland == 2 & LastIsland == 2, "Positive", "Negative")) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Future, values_from = percent_risky)

loss_ANX <- loss_data %>%
  filter(GAD_binary == "GAD 6+")

loss_ANX_long <- loss_ANX %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "percent_risky"     # New column for percent risky choices
  )

wilcox.test(loss_ANX_long$percent_risky~loss_ANX_long$Future,paired=FALSE)


loss_lowANX <- loss_data %>%
  filter(GAD_binary == "GAD <6")

loss_lowANX_long <- loss_lowANX %>%
  pivot_longer(
    cols = c(Positive, Negative),  # Columns to pivot
    names_to = "Future",            # New column for future condition
    values_to = "percent_risky"     # New column for percent risky choices
  )


wilcox.test(loss_lowANX_long$percent_risky~loss_lowANX_long$Future,paired=FALSE)






# comparing % risky choices when future is positive in Gain vs Loss Domains

positive_future_data <- happyData1 %>%
  filter(NextIsland == 2 & LastIsland == 2, !is.na(GAD_binary)) %>%  # Filter for Positive future
  group_by(userKey, GAD_binary, Domain = ifelse(Trial == "Gain", "Gain", "Loss")) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Domain, values_from = percent_risky)

positive_future_long <- positive_future_data %>%
  pivot_longer(
    cols = c(Gain, Loss),  # Columns to pivot
    names_to = "Domain",   # New column for domain condition (Gain vs Loss)
    values_to = "percent_risky"  # New column for percent risky choices
  ) %>%
  drop_na(percent_risky)  # Remove any rows with NA values in percent_risky

positive_future_anx <- positive_future_long %>%
  filter(GAD_binary == "GAD 6+")

wilcox.test(percent_risky ~ Domain, data = positive_future_anx, paired = FALSE)

# Repeat for GAD <5 group
positive_future_non_anx <- positive_future_long %>%
  filter(GAD_binary == "GAD <6")

wilcox.test(percent_risky ~ Domain,  data = positive_future_non_anx, paired =FALSE)


## for negative future
negative_future_data <- happyData1 %>%
  filter(NextIsland == 1, LastIsland == 1, !is.na(GAD_binary)) %>%  # Filter for Positive future
  group_by(userKey, GAD_binary, Domain = ifelse(Trial == "Gain", "Gain", "Loss")) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  ) %>%
  pivot_wider(names_from = Domain, values_from = percent_risky)

negative_future_long <- negative_future_data %>%
  pivot_longer(
    cols = c(Gain, Loss),  # Columns to pivot
    names_to = "Domain",   # New column for domain condition (Gain vs Loss)
    values_to = "percent_risky"  # New column for percent risky choices
  ) %>%
  drop_na(percent_risky)  # Remove any rows with NA values in percent_risky

negative_future_anx <- negative_future_long %>%
  filter(GAD_binary == "GAD 6+")

wilcox.test(percent_risky ~ Domain, data = negative_future_anx, paired = FALSE)

# Repeat for GAD <6 group
negative_future_non_anx <- negative_future_long %>%
  filter(GAD_binary == "GAD <6")

wilcox.test(percent_risky ~ Domain,  data = negative_future_non_anx, paired =FALSE)
```

### Happiness Based on Gamble Decisions

```{r Happiness Based on Gamble Decisions}
#z-scored happiness
choice_risky <- happyData1 %>%
  filter(Choice == 2) %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky")
  
# safe choice
choice_safe <- happyData1 %>%
  filter(Choice == 1) %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe")
  
choice_combined <- bind_rows(choice_risky, choice_safe)
summary_choice <- choice_combined %>%
    group_by(Choice) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  fill = Choice, group = Choice)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                  position = position_dodge(1), width = 0.2) + 
      geom_point(aes(y = mean_predhappy), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) +
    theme_minimal() +
  ylim(-0.03, 0.03) +
    poster_theme 



# residuals
# happiness based on risky vs safe choice (backfilled)
happyData1 <- happyData1 %>%
  mutate(residuals=zHappy_filled - zHappyPred_filled)

choice_risky <- happyData1 %>%
  filter(Choice == 2) %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky")
  
# safe choice
choice_safe <- happyData1 %>%
  filter(Choice == 1) %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe")
  
choice_combined <- bind_rows(choice_risky, choice_safe)
summary_choice <- choice_combined %>%
    group_by(Choice) %>% 
  summarise(mean_resids = mean(mean_residuals,na.rm=TRUE),
            sem_resids = sd(mean_residuals, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_resids,  fill = Choice, grgoup=Choice)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_resids - sem_resids, ymax = mean_resids + sem_resids),
                  position = position_dodge(1), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    labs(
      title = "Happiness Residuals (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy Resid"
    ) +
    theme_minimal() +
  ylim(-0.03, 0.03) + 
    poster_theme 
```


People seem slightly less happy when they take the safe option


### Happiness Based on Choice and Domain
```{r Happiness Based on Choice and Domain}
### BACKFILLED
happyData1 <- happyData1 %>%
  mutate(residuals=zHappy_filled - zHappyPred_filled)

#z-scored happiness
choice_risky_gain <- happyData1 %>%
  filter(Choice == 2 & Trial =="Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")


choice_risky_loss <- happyData1 %>%
  filter(Choice == 2 & Trial =="Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")
  
# safe choice
choice_safe_gain <- happyData1 %>%
  filter(Choice == 1 & Trial=="Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Gain")

choice_safe_loss <- happyData1 %>%
  filter(Choice == 1 & Trial=="Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Loss")

  
choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice,Current) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  fill = Current, group=Current)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),position = position_dodge(0.7), width = 0.2) + 
      geom_point(aes(y = mean_predhappy), color = "lightblue", shape = 8, size = 3,position = position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) +
    theme_minimal() +
    poster_theme 


# residuals

choice_risky_gain <- happyData1 %>%
  filter(Choice == 2 & Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")

choice_risky_loss <- happyData1 %>%
  filter(Choice == 2 & Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")


  
# safe choice
choice_safe_gain <- happyData1 %>%
  filter(Choice == 1 & Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
                  Current = "Gain")

choice_safe_loss <- happyData1 %>%
  filter(Choice == 1 & Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
                  Current = "Loss")

  

choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice, Current) %>% 
  summarise(mean_resids = mean(mean_residuals,na.rm=TRUE),
            sem_resids = sd(mean_residuals, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_resids,  fill=Current, group=Current)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_resids - sem_resids, ymax = mean_resids + sem_resids),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
      scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +

    labs(
      title = "Happiness Residuals (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy Resid"
    ) +
    theme_minimal() +
  ylim(-0.1, 0.1) + 
    poster_theme 
```

```{r}
### NON-BACKFILLED
happyData1 <- happyData1 %>%
  mutate(residuals=zHappy - zHappyPred)

#z-scored happiness
choice_risky_gain <- happyData1 %>%
  filter(Choice == 2 & Trial =="Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")


choice_risky_loss <- happyData1 %>%
  filter(Choice == 2 & Trial =="Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")
  
# safe choice
choice_safe_gain <- happyData1 %>%
  filter(Choice == 1 & Trial=="Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Gain")

choice_safe_loss <- happyData1 %>%
  filter(Choice == 1 & Trial=="Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Loss")

  
choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice,Current) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  fill = Current, group=Current)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),position = position_dodge(0.7), width = 0.2) + 
      geom_point(aes(y = mean_predhappy), color = "lightblue", shape = 8, size = 3,position = position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) +
  ylim(-0.3,0.3)+
    theme_minimal() +
    poster_theme 


# residuals

choice_risky_gain <- happyData1 %>%
  filter(Choice == 2 & Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")

choice_risky_loss <- happyData1 %>%
  filter(Choice == 2 & Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")


  
# safe choice
choice_safe_gain <- happyData1 %>%
  filter(Choice == 1 & Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
                  Current = "Gain")

choice_safe_loss <- happyData1 %>%
  filter(Choice == 1 & Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
                  Current = "Loss")

  

choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice, Current) %>% 
  summarise(mean_resids = mean(mean_residuals,na.rm=TRUE),
            sem_resids = sd(mean_residuals, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_resids,  fill=Current, group=Current)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_resids - sem_resids, ymax = mean_resids + sem_resids),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
      scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +

    labs(
      title = "Happiness Residuals (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy Resid"
    ) +
    theme_minimal() +
  ylim(-0.3, 0.3) + 
    poster_theme 
```

### Happiness Based on Choice and Domain (Difference analyses)

```{r}
## choose risky-chose safe in Gain 
happyData1 <- happyData1 %>%
  mutate(Choice_cat = case_when(Choice==2 ~ "Risky",
                               Choice==1 ~ "Safe"))
happiness_risky <- happyData1 %>%
  filter(Trial == "Gain") %>%
  group_by(userKey, Choice_cat) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm = TRUE), 
            GAD_score = first(gad7_total),
            PHQ_score = first(phq8_total), .groups = 'drop') %>%
  na.omit()

happiness_gain_diff <- happiness_risky %>%
  spread(key = Choice_cat, value = mean_zHappy) %>%
  mutate(happy_diff = Risky-Safe )  


cor.test(happiness_gain_diff$happy_diff, happiness_gain_diff$GAD_score, method="spearman")
cor.test(happiness_gain_diff$happy_diff, happiness_gain_diff$PHQ_score,method="spearman")

# no corelation between difference in happiness when choosing safe vs risky in gain domain with depression or anxiety

happiness_risky <- happyData1 %>%
  filter(Trial == "Loss") %>%
  group_by(userKey, Choice_cat) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm = TRUE), 
            GAD_score = first(gad7_total),
            PHQ_score = first(phq8_total), .groups = 'drop') %>%
  na.omit()

happiness_gain_diff <- happiness_risky %>%
  spread(key = Choice_cat, value = mean_zHappy) %>%
  mutate(happy_diff = Risky-Safe )  


cor.test(happiness_gain_diff$happy_diff, happiness_gain_diff$GAD_score, method="spearman")
cor.test(happiness_gain_diff$happy_diff, happiness_gain_diff$PHQ_score,method="spearman")

# no correlation in loss domain either 

# plot
happiness_domains <- happyData1 %>%
  filter(Trial %in% c("Gain", "Loss")) %>%
  group_by(userKey, Trial, Choice_cat) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm = TRUE), .groups = 'drop')

happiness_diff_domains <- happiness_domains %>%
  spread(key = Choice_cat, value = mean_zHappy) %>%
  mutate(happy_diff = Risky - Safe)  

happiness_summary <- happiness_diff_domains %>%
  group_by(Trial) %>%
  summarise(mean_happy_diff = mean(happy_diff, na.rm = TRUE),
            sem_happy_diff = sd(happy_diff, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop')

# Step 4: Create the bar plot
ggplot(happiness_summary, aes(x = Trial, y = mean_happy_diff, fill = Trial)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black") +
  geom_errorbar(aes(ymin = mean_happy_diff - sem_happy_diff, ymax = mean_happy_diff + sem_happy_diff),
                width = 0.2, position = position_dodge(0.7)) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
  labs(
    title = "Difference in zHappy between Risky and Safe Choice by Domain",
    x = "Domain",
    y = "Mean zHappy Difference (Risky - Safe)"
  ) +
  theme_minimal() +
  ylim(-0.3, 0.3) + 
  scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +
  poster_theme

```


### Happiness Based on Choice and Future (Positive vs Negative)

```{r}

happyData1 <- happyData1 %>%
  mutate(residuals=zHappy_filled - zHappyPred_filled)

#z-scored happiness
choice_risky_pos <- happyData1 %>%
  filter(Choice == 2 & NextIsland ==2 & LastIsland ==2 ) %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Positive")


choice_risky_neg <- happyData1 %>%
  filter(Choice == 2 & NextIsland ==1 & LastIsland ==1 ) %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Negative")
  
# safe choice
choice_safe_pos <- happyData1 %>%
  filter(Choice == 1 & NextIsland ==2 & LastIsland ==2 ) %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
         Future = "Positive")

choice_safe_neg <- happyData1 %>%
  filter(Choice == 1 & NextIsland ==1 & LastIsland ==1) %>%
  group_by(userKey) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
         Future = "Negative")

  
choice_combined <- bind_rows(choice_risky_pos, choice_risky_neg,choice_safe_pos,choice_safe_neg)
summary_choice <- choice_combined %>%
    group_by(Choice,Future) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  color = Choice)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black") +
  geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                  position = position_dodge(1), width = 0.2, group="Choice") + 
      geom_point(aes(y = mean_predhappy), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) +
   facet_wrap(~Future) +
    theme_minimal() +
    poster_theme 


# residuals

choice_risky_pos <- happyData1 %>%
  filter(Choice == 2 & NextIsland ==2 & LastIsland ==2 ) %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Positive")

choice_risky_neg <- happyData1 %>%
  filter(Choice == 2 & NextIsland ==1 & LastIsland ==1 ) %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Negative")


  
# safe choice
choice_safe_pos <- happyData1 %>%
  filter(Choice == 1 & NextIsland ==2 & LastIsland ==2 ) %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Future = "Positive")

choice_safe_neg <- happyData1 %>%
  filter(Choice == 1  & NextIsland ==1 & LastIsland ==1) %>%
  group_by(userKey) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Future = "Negative")

  

choice_combined <- bind_rows(choice_risky_pos, choice_risky_neg,choice_safe_pos,choice_safe_neg)
summary_choice <- choice_combined %>%
    group_by(Choice, Future) %>% 
  summarise(mean_resids = mean(mean_residuals,na.rm=TRUE),
            sem_resids = sd(mean_residuals, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_resids,  color = Choice)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black") +
  geom_errorbar(aes(ymin = mean_resids - sem_resids, ymax = mean_resids + sem_resids),
                  position = position_dodge(1), width = 0.2, group="Choice") + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=
    labs(
      title = "Happiness Residuals (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy Resid"
    ) +
     facet_wrap(~Future) +
    theme_minimal() +
  ylim(-0.1, 0.1) + 
    poster_theme 
```

### Happiness Based on Choice and Domain, split by GAD
```{r Happiness Based on Choice and Domain, Split by GAD}

##BACKFILLED
#z-scored happiness
choice_risky_gain <- happyData1 %>%
  filter(Choice == 2 & Trial =="Gain" & !is.na(GAD_binary)) %>%
  group_by(userKey ,GAD_binary) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")

choice_risky_loss <- happyData1 %>%
  filter(Choice == 2 & Trial =="Loss" & !is.na(GAD_binary)) %>%
  group_by(userKey,GAD_binary) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")
  
# safe choice
choice_safe_gain <- happyData1 %>%
  filter(Choice == 1 & Trial=="Gain" & !is.na(GAD_binary)) %>%
  group_by(userKey,GAD_binary) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Gain")

choice_safe_loss <- happyData1 %>%
  filter(Choice == 1 & Trial=="Loss" & !is.na(GAD_binary)) %>%
  group_by(userKey,GAD_binary) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Loss")

  
choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice,Current,GAD_binary) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  color = GAD_binary)) +
    geom_point(position = position_dodge(0.5), width = 0.7,size=2) +
    geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                  position = position_dodge(0.5), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
  scale_color_manual(values = c("GAD 6+" = "#00BD9D", "GAD <6" = "#8BD7D2")) + 
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) + 
  facet_wrap(~Current) + 
    theme_minimal() +
    poster_theme


## GAD BINS BACKFILLED

#z-scored happiness
choice_risky_gain <- happyData1 %>%
  filter(Choice == 2 & Trial =="Gain" & !is.na(GAD_bin)) %>%
  group_by(userKey ,GAD_bin) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
            GAD_score = first(gad7_total),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")

cor.test(choice_risky_gain$GAD_score,choice_risky_gain$mean_zhappy,method="spearman")

choice_risky_loss <- happyData1 %>%
  filter(Choice == 2 & Trial =="Loss" & !is.na(GAD_bin)) %>%
  group_by(userKey,GAD_bin) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
            GAD_score = first(gad7_total),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")
  
cor.test(choice_risky_loss$GAD_score,choice_risky_loss$mean_zhappy,method="spearman")

# safe choice
choice_safe_gain <- happyData1 %>%
  filter(Choice == 1 & Trial=="Gain" & !is.na(GAD_bin)) %>%
  group_by(userKey,GAD_bin) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
            GAD_score = first(gad7_total),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Gain")

cor.test(choice_safe_gain$GAD_score,choice_safe_gain$mean_zhappy,method="spearman")


choice_safe_loss <- happyData1 %>%
  filter(Choice == 1 & Trial=="Loss" & !is.na(GAD_bin)) %>%
  group_by(userKey,GAD_bin) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
            GAD_score = first(gad7_total),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Loss")
cor.test(choice_safe_loss$GAD_score,choice_safe_loss$mean_zhappy,method="spearman")

  
choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice,Current,GAD_bin) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  color = GAD_bin)) +
    geom_point(position = position_dodge(0.5), width = 0.7,size=2) +
    geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                  position = position_dodge(0.5), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_color_manual(values = c("0-4" = "#8BD7D2", "5-9" = "#6FACA8", "10-14" = "#53817E", "15-21" = "#385654")) +
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) + 
  facet_wrap(~Current) + 
    theme_minimal() +
    poster_theme

## PHQ bins

#z-scored happiness
choice_risky_gain <- happyData1 %>%
  filter(Choice == 2 & Trial =="Gain" & !is.na(PHQ_bin)) %>%
  group_by(userKey ,PHQ_bin) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
            PHQ_score = first(phq8_total),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")

cor.test(choice_risky_gain$PHQ_score,choice_risky_gain$mean_zhappy,method="spearman")

choice_risky_loss <- happyData1 %>%
  filter(Choice == 2 & Trial =="Loss" & !is.na(PHQ_bin)) %>%
  group_by(userKey,PHQ_bin) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
            PHQ_score = first(phq8_total),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")
  
cor.test(choice_risky_loss$PHQ_score,choice_risky_loss$mean_zhappy,method="spearman")

# safe choice
choice_safe_gain <- happyData1 %>%
  filter(Choice == 1 & Trial=="Gain" & !is.na(PHQ_bin)) %>%
  group_by(userKey,PHQ_bin) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
            PHQ_score = first(phq8_total),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Gain")

cor.test(choice_safe_gain$PHQ_score,choice_safe_gain$mean_zhappy,method="spearman")


choice_safe_loss <- happyData1 %>%
  filter(Choice == 1 & Trial=="Loss" & !is.na(PHQ_bin)) %>%
  group_by(userKey,PHQ_bin) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm=TRUE),
            PHQ_score = first(phq8_total),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Loss")
cor.test(choice_safe_loss$PHQ_score,choice_safe_loss$mean_zhappy,method="spearman")

  
choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice,Current,PHQ_bin) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  color = PHQ_bin)) +
    geom_point(position = position_dodge(0.5), width = 0.7,size=2) +
    geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                  position = position_dodge(0.5), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
      scale_color_manual(values = c("0-4" = "#FFC0CB", "5-9" = "#CC9AA2", "10-14" = "#99737A", "15-24" = "#664D51")) +
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) + 
  facet_wrap(~Current) + 
    theme_minimal() +
    poster_theme

```

### Happniess Based on Choice, Future and Current Domain

```{r Happiness Based on Choice, Future and Current Domain}
# BACKFILLED
happyData1 <- happyData1 %>%
  mutate(residuals = zHappy_filled - zHappyPred_filled)

# z-scored happiness with Trial filter
choice_risky_pos <- happyData1 %>%
  filter(Choice == 2 & NextIsland == 2 & LastIsland == 2 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Positive")


choice_risky_neg <- happyData1 %>%
  filter(Choice == 2 & NextIsland == 1 & LastIsland == 1 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Negative")

# Safe choice
choice_safe_pos <- happyData1 %>%
  filter(Choice == 1 & NextIsland == 2 & LastIsland == 2 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
         Future = "Positive")

choice_safe_neg <- happyData1 %>%
  filter(Choice == 1 & NextIsland == 1 & LastIsland == 1 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_zhappy = mean(zHappy_filled, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred_filled, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
         Future = "Negative")

# Combine all choices
choice_combined <- bind_rows(choice_risky_pos, choice_risky_neg, choice_safe_pos, choice_safe_neg)

# Summarise by Choice, Future, and Trial
summary_choice <- choice_combined %>%
  group_by(Choice, Future, Trial) %>%
  summarise(mean_happy = mean(mean_zhappy, na.rm = TRUE),
            mean_predhappy = mean(mean_zpredhappy, na.rm = TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))

# Plot happiness based on choice, future, and trial
ggplot(summary_choice, aes(x = Choice, y = mean_happy, fill = Trial)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black") +
  geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                position = position_dodge(0.7), width = 0.2) + 
  geom_point(aes(y = mean_predhappy), color = "lightblue", shape = 8, size = 3, position = position_dodge(0.7)) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
  labs(
    title = "Happiness (z-scored) Based on Choice and Trial",
    x = "Choice",
    y = "zHappy"
  ) +
  scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) + 
  facet_wrap(~Future) +
  ylim(-0.2,0.2) +
  theme_minimal() +
  poster_theme

# residuals

# Now for residuals with Trial filter
choice_risky_pos_res <- happyData1 %>%
  filter(Choice == 2 & NextIsland == 2 & LastIsland == 2 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Positive")

choice_risky_neg_res <- happyData1 %>%
  filter(Choice == 2 & NextIsland == 1 & LastIsland == 1 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Negative")


# Safe choice residuals
choice_safe_pos_res <- happyData1 %>%
  filter(Choice == 1 & NextIsland == 2 & LastIsland == 2 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
         Future = "Positive")

choice_safe_neg_res <- happyData1 %>%
  filter(Choice == 1 & NextIsland == 1 & LastIsland == 1 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
         Future = "Negative")

# Combine all choices residuals
choice_combined_res <- bind_rows(choice_risky_pos_res, choice_risky_neg_res, choice_safe_pos_res, choice_safe_neg_res)

# Summarise by Choice, Future, and Trial for residuals
summary_choice_residuals <- choice_combined_res %>%
  group_by(Choice, Future, Trial) %>%
  summarise(mean_resids = mean(mean_residuals, na.rm = TRUE),
            sem_resids = sd(mean_residuals, na.rm = TRUE) / sqrt(n()))

# Plot residuals based on choice, future, and trial
ggplot(summary_choice_residuals, aes(x = Choice, y = mean_resids, fill=Trial)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black") +
  geom_errorbar(aes(ymin = mean_resids - sem_resids, ymax = mean_resids + sem_resids),
                position = position_dodge(0.7), width = 0.2) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
  labs(
    title = "Happiness Residuals (z-scored) Based on Choice and Trial",
    x = "Choice",
    y = "zHappy Residuals"
  ) +
  facet_wrap(~Future) +
  theme_minimal() +
    scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) + 
  ylim(-0.1, 0.1) + 
  poster_theme

```


```{r Happiness Based on Choice, Future and Current Domain (non-backfilled)}
## NON-BACKFILLED
happyData1 <- happyData1 %>%
  mutate(residuals = zHappy - zHappyPred)

# z-scored happiness with Trial filter
choice_risky_pos <- happyData1 %>%
  filter(Choice == 2 & NextIsland == 2 & LastIsland == 2 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Positive")


choice_risky_neg <- happyData1 %>%
  filter(Choice == 2 & NextIsland == 1 & LastIsland == 1 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Negative")

# Safe choice
choice_safe_pos <- happyData1 %>%
  filter(Choice == 1 & NextIsland == 2 & LastIsland == 2 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
         Future = "Positive")

choice_safe_neg <- happyData1 %>%
  filter(Choice == 1 & NextIsland == 1 & LastIsland == 1 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
         Future = "Negative")

# Combine all choices
choice_combined <- bind_rows(choice_risky_pos, choice_risky_neg, choice_safe_pos, choice_safe_neg)

# Summarise by Choice, Future, and Trial
summary_choice <- choice_combined %>%
  group_by(Choice, Future, Trial) %>%
  summarise(mean_happy = mean(mean_zhappy, na.rm = TRUE),
            mean_predhappy = mean(mean_zpredhappy, na.rm = TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))

# Plot happiness based on choice, future, and trial
ggplot(summary_choice, aes(x = Choice, y = mean_happy, fill = Trial)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black") +
  geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                position = position_dodge(0.7), width = 0.2) + 
  geom_point(aes(y = mean_predhappy), color = "lightblue", shape = 8, size = 3, position = position_dodge(0.7)) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
  labs(
    title = "Happiness (z-scored) Based on Choice and Trial",
    x = "Choice",
    y = "zHappy"
  ) +
  scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) + 
  facet_wrap(~Future) +
  ylim(-0.35,0.35) +
  theme_minimal() +
  poster_theme

# residuals

# Now for residuals with Trial filter
choice_risky_pos_res <- happyData1 %>%
  filter(Choice == 2 & NextIsland == 2 & LastIsland == 2 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Positive")

choice_risky_neg_res <- happyData1 %>%
  filter(Choice == 2 & NextIsland == 1 & LastIsland == 1 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Future = "Negative")


# Safe choice residuals
choice_safe_pos_res <- happyData1 %>%
  filter(Choice == 1 & NextIsland == 2 & LastIsland == 2 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
         Future = "Positive")

choice_safe_neg_res <- happyData1 %>%
  filter(Choice == 1 & NextIsland == 1 & LastIsland == 1 & (Trial == "Gain" | Trial == "Loss")) %>%
  group_by(userKey, Trial) %>%
  summarise(mean_residuals = mean(residuals, na.rm = TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
         Future = "Negative")

# Combine all choices residuals
choice_combined_res <- bind_rows(choice_risky_pos_res, choice_risky_neg_res, choice_safe_pos_res, choice_safe_neg_res)

# Summarise by Choice, Future, and Trial for residuals
summary_choice_residuals <- choice_combined_res %>%
  group_by(Choice, Future, Trial) %>%
  summarise(mean_resids = mean(mean_residuals, na.rm = TRUE),
            sem_resids = sd(mean_residuals, na.rm = TRUE) / sqrt(n()))

# Plot residuals based on choice, future, and trial
ggplot(summary_choice_residuals, aes(x = Choice, y = mean_resids, fill=Trial)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black") +
  geom_errorbar(aes(ymin = mean_resids - sem_resids, ymax = mean_resids + sem_resids),
                position = position_dodge(0.7), width = 0.2) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
  labs(
    title = "Happiness Residuals (z-scored) Based on Choice and Trial",
    x = "Choice",
    y = "zHappy Residuals"
  ) +
  facet_wrap(~Future) +
  theme_minimal() +
    scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) + 
  ylim(-0.3, 0.3) + 
  poster_theme
```


### Happiness Based on Choice and Domain (PHQ and GAD Bins)

```{r non-backfilled happiness choice x domain, PHQ and GAD}
#z-scored happiness
choice_risky_gain <- happyData1 %>%
  filter(Choice == 2 & Trial =="Gain" & !is.na(GAD_bin)) %>%
  group_by(userKey ,GAD_bin) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
            GAD_score = first(gad7_total),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")

cor.test(choice_risky_gain$GAD_score,choice_risky_gain$mean_zhappy,method="spearman")

choice_risky_loss <- happyData1 %>%
  filter(Choice == 2 & Trial =="Loss" & !is.na(GAD_bin)) %>%
  group_by(userKey,GAD_bin) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
            GAD_score = first(gad7_total),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")
  
cor.test(choice_risky_loss$GAD_score,choice_risky_loss$mean_zhappy,method="spearman")

# safe choice
choice_safe_gain <- happyData1 %>%
  filter(Choice == 1 & Trial=="Gain" & !is.na(GAD_bin)) %>%
  group_by(userKey,GAD_bin) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
            GAD_score = first(gad7_total),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Gain")

cor.test(choice_safe_gain$GAD_score,choice_safe_gain$mean_zhappy,method="spearman")


choice_safe_loss <- happyData1 %>%
  filter(Choice == 1 & Trial=="Loss" & !is.na(GAD_bin)) %>%
  group_by(userKey,GAD_bin) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
            GAD_score = first(gad7_total),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Loss")
cor.test(choice_safe_loss$GAD_score,choice_safe_loss$mean_zhappy,method="spearman")

  
choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice,Current,GAD_bin) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  color = GAD_bin)) +
    geom_point(position = position_dodge(0.5), width = 0.7,size=2) +
    geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                  position = position_dodge(0.5), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_color_manual(values = c("0-4" = "#8BD7D2", "5-9" = "#6FACA8", "10-14" = "#53817E", "15-21" = "#385654")) +
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) + 
  facet_wrap(~Current) + 
    theme_minimal() +
    poster_theme

## PHQ bins

#z-scored happiness
choice_risky_gain <- happyData1 %>%
  filter(Choice == 2 & Trial =="Gain" & !is.na(PHQ_bin)) %>%
  group_by(userKey ,PHQ_bin) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
            PHQ_score = first(phq8_total),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")

cor.test(choice_risky_gain$PHQ_score,choice_risky_gain$mean_zhappy,method="spearman")

choice_risky_loss <- happyData1 %>%
  filter(Choice == 2 & Trial =="Loss" & !is.na(PHQ_bin)) %>%
  group_by(userKey,PHQ_bin) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
            PHQ_score = first(phq8_total),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")
  
cor.test(choice_risky_loss$PHQ_score,choice_risky_loss$mean_zhappy,method="spearman")

# safe choice
choice_safe_gain <- happyData1 %>%
  filter(Choice == 1 & Trial=="Gain" & !is.na(PHQ_bin)) %>%
  group_by(userKey,PHQ_bin) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
            PHQ_score = first(phq8_total),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Gain")

cor.test(choice_safe_gain$PHQ_score,choice_safe_gain$mean_zhappy,method="spearman")


choice_safe_loss <- happyData1 %>%
  filter(Choice == 1 & Trial=="Loss" & !is.na(PHQ_bin)) %>%
  group_by(userKey,PHQ_bin) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
            PHQ_score = first(phq8_total),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Loss")
cor.test(choice_safe_loss$PHQ_score,choice_safe_loss$mean_zhappy,method="spearman")

  
choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice,Current,PHQ_bin) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  color = PHQ_bin)) +
    geom_point(position = position_dodge(0.5), width = 0.7,size=2) +
    geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                  position = position_dodge(0.5), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
      scale_color_manual(values = c("0-4" = "#FFC0CB", "5-9" = "#CC9AA2", "10-14" = "#99737A", "15-24" = "#664D51")) +
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) + 
  facet_wrap(~Current) + 
    theme_minimal() +
    poster_theme
```

# Gambling Behaviour and Happiness Based on EV Bins (Choice Curves)

```{r EV and % Gambling and Happiness}

happyData1_ev <- happyData1 %>%
  mutate(SafeEV = SafeProb*SafeValue,
         RiskyEV = RiskyProb*RiskyValue)

happyData1_ev <- happyData1_ev %>%
  mutate(RiskyEV_bin = cut(abs(RiskyEV), 
                           breaks = c(0, 9, 19, 29, 39, 49, Inf), 
                           labels = c("0-9", "10-19", "20-29", "30-39", "40-49", "50+"),
                           right = TRUE))

risky_data <- happyData1_ev %>%
  group_by(userKey, Trial, RiskyEV_bin) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),  # Assuming Choice == 2 indicates a risky choice
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  )

# Calculate the mean percent_risky per participant for each abs(RiskyEV)
mean_risky_ev_data <- risky_data %>%
  mutate(abs_RiskyEV = RiskyEV_bin) %>%         # Use absolute RiskyEV
  group_by(userKey, Trial, abs_RiskyEV) %>%
  summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
            .groups = 'drop')

# Now calculate the average across participants for each abs(RiskyEV), split by Trial
overall_mean_risky_ev_data <- mean_risky_ev_data %>%
  group_by(Trial, abs_RiskyEV) %>%
  summarise(mean_percent_risky_all = mean(mean_percent_risky, na.rm = TRUE),
            sem_percent_risky = sd(mean_percent_risky)/sqrt(n()),
            .groups = 'drop')

# Plot the data
ggplot(overall_mean_risky_ev_data, aes(x = abs_RiskyEV, y = mean_percent_risky_all, color = Trial, group=Trial)) +
  geom_line(size = 1) +                             # Ensure the line connects the points
  geom_point() +                                    # Points for clarity
  geom_errorbar(aes(ymin = mean_percent_risky_all - sem_percent_risky, ymax = mean_percent_risky_all + sem_percent_risky), width = 0.2) +  # Error bars for SEM
  geom_hline(yintercept = 50, linetype = "dotted", color = "black") +                              # Add points for clarity
  labs(x = "Absolute RiskyEV", y = "Mean Percentage of Risky Choices",
       title = "Mean % of Risky Choices by Absolute RiskyEV",
       color = "Trial") +
  theme_minimal() +
  ylim(0, 100) +
  scale_color_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347"))  +
  poster_theme




## split by GAD
risky_data <- happyData1_ev %>%
  filter(!is.na(GAD_binary)) %>%
  group_by(userKey, Trial, RiskyEV, GAD_binary) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),  # Assuming Choice == 2 indicates a risky choice
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  )

mean_risky_ev_data_gad <- risky_data %>%
  mutate(abs_RiskyEV = abs(RiskyEV)) %>%
  group_by(userKey, Trial, GAD_binary, abs_RiskyEV) %>%
  summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
            .groups = 'drop')

overall_mean_risky_ev_data_gad <- mean_risky_ev_data_gad %>%
  group_by(Trial, GAD_binary, abs_RiskyEV) %>%
  summarise(mean_percent_risky_all = mean(mean_percent_risky, na.rm = TRUE),
            .groups = 'drop')

# Create the plot
ggplot(overall_mean_risky_ev_data_gad, aes(x = abs_RiskyEV, y = mean_percent_risky_all, color = GAD_binary, linetype = Trial)) +
  geom_line(size = 1) +   
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") + 
  geom_point() +                                              # Points for clarity
  labs(x = "Absolute RiskyEV", y = "Mean Percentage of Risky Choices",
       title = "Mean % of Risky Choices by Absolute RiskyEV (split by GAD)",
       color = "GAD Group", linetype = "Trial Type") +
  theme_minimal() +
  ylim(0, 100) +
  scale_color_manual(values = c("GAD 6+" = "#00BD9D", "GAD <6" = "#8BD7D2")) +  # Custom colors for GAD groups
  scale_linetype_manual(values = c("Gain" = "solid", "Loss" = "dotted")) + 
  poster_theme 


## PHQ

risky_data <- happyData1_ev %>%
  filter(!is.na(PHQ_binary)) %>%
  group_by(userKey, Trial, RiskyEV, PHQ_binary) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),  # Assuming Choice == 2 indicates a risky choice
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  )

mean_risky_ev_data_phq <- risky_data %>%
  mutate(abs_RiskyEV = abs(RiskyEV)) %>%
  group_by(userKey, Trial, PHQ_binary, abs_RiskyEV) %>%
  summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
            .groups = 'drop')

overall_mean_risky_ev_data_phq <- mean_risky_ev_data_phq %>%
  group_by(Trial, PHQ_binary, abs_RiskyEV) %>%
  summarise(mean_percent_risky_all = mean(mean_percent_risky, na.rm = TRUE),
            .groups = 'drop')

# Create the plot
ggplot(overall_mean_risky_ev_data_phq, aes(x = abs_RiskyEV, y = mean_percent_risky_all, color = PHQ_binary, linetype = Trial)) +
  geom_line(size = 1) +   
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") + 
  geom_point() +                                              # Points for clarity
  labs(x = "Absolute RiskyEV", y = "Mean Percentage of Risky Choices",
       title = "Mean % of Risky Choices by Absolute RiskyEV (split by PHQ)",
       color = "PHQ Group", linetype = "Trial Type") +
  theme_minimal() +
  ylim(0, 100) +
  scale_color_manual(values = c("PHQ 7+" = "red", "PHQ <7" = "pink")) +  # Custom colors for GAD groups
  scale_linetype_manual(values = c("Gain" = "solid", "Loss" = "dotted")) + 
  poster_theme 
  
```

### Happiness and Risky EV
```{r Happiness and Risky EV}


happy_data <- happyData1_ev %>%
  filter(!is.na(GAD_binary)) %>%
  group_by(userKey, Trial, RiskyEV_bin,GAD_binary) %>%
  summarise(
    mean_zhappy = mean(zHappy,na.rm=TRUE)
  ) 

# Calculate the mean percent_risky per participant for each abs(RiskyEV)
mean_happy_ev_data <- happy_data %>%
  mutate(abs_RiskyEV = RiskyEV_bin) %>%         # Use absolute RiskyEV
  group_by(userKey, Trial, abs_RiskyEV) %>%
  summarise(mean_z_happy = mean(mean_zhappy, na.rm = TRUE),
            .groups = 'drop')

# Now calculate the average across participants for each abs(RiskyEV), split by Trial
overall_mean_happy_ev_data <- mean_happy_ev_data %>%
  group_by(Trial, abs_RiskyEV) %>%
  summarise(mean_z_happy_all = mean(mean_z_happy, na.rm = TRUE),
            sem_z_happy_all = sd(mean_z_happy, na.rm=TRUE) / sqrt(n()),
            .groups = 'drop')

# Plot the data with error bars
ggplot(overall_mean_happy_ev_data, aes(x = abs_RiskyEV, y = mean_z_happy_all, color = Trial, group = Trial)) +
  geom_line(size = 1) +                             # Ensure the line connects the points
  geom_point() +                                    # Points for clarity
  geom_errorbar(aes(ymin = mean_z_happy_all - sem_z_happy_all, ymax = mean_z_happy_all + sem_z_happy_all), width = 0.2) +  # Error bars for SEM
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Dotted line at y=0
  labs(x = "Absolute RiskyEV", y = "Mean z Happy Score",
       title = "Mean z Happy Score by Absolute RiskyEV",
       color = "Trial") +
  theme_minimal() +
  scale_color_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +  # Custom colors
  poster_theme



## GAD Split
# Calculate the mean z_happy per participant for each abs(RiskyEV), including GAD groupings
mean_happy_ev_data_gad <- happy_data %>%
  mutate(abs_RiskyEV = RiskyEV_bin) %>%         # Use absolute RiskyEV
  group_by(userKey, Trial, GAD_binary, abs_RiskyEV) %>%
  summarise(mean_z_happy = mean(mean_zhappy, na.rm = TRUE),
            .groups = 'drop')

# Now calculate the average across participants for each abs(RiskyEV), split by Trial and GAD group
overall_mean_happy_ev_data_gad <- mean_happy_ev_data_gad %>%
  group_by(Trial, GAD_binary, abs_RiskyEV) %>%
  summarise(mean_z_happy_all = mean(mean_z_happy, na.rm = TRUE),
             sem_z_happy_all = sd(mean_z_happy, na.rm=TRUE) / sqrt(n()),
            .groups = 'drop')

# Plot the data with GAD splitting
ggplot(overall_mean_happy_ev_data_gad, aes(x = abs_RiskyEV, y = mean_z_happy_all, color = GAD_binary, linetype = Trial, group = interaction(GAD_binary, Trial))) +
  geom_line(size = 1) +                             # Ensure the line connects the points
  geom_point() +                                    # Points for clarity
  geom_errorbar(aes(ymin = mean_z_happy_all - sem_z_happy_all, ymax = mean_z_happy_all + sem_z_happy_all), width = 0.2) +  # Error bars for SEM
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Dotted line at y=0
  labs(x = "Absolute RiskyEV", y = "Mean z Happy Score",
       title = "Mean z Happy Score by Absolute RiskyEV (split by GAD)",
       color = "GAD Group", linetype = "Trial Type") +
  theme_minimal() +
  scale_color_manual(values = c("GAD 6+" = "#00BD9D", "GAD <6" = "#8BD7D2")) +  # Custom colors for GAD groups
  scale_linetype_manual(values = c("Gain" = "solid", "Loss" = "dotted")) +      # Solid for Gain, dotted for Loss
  poster_theme



# PHQ

# Calculate the mean z_happy per participant for each abs(RiskyEV), including GAD groupings
happy_data <- happyData1_ev %>%
  filter(!is.na(PHQ_binary)) %>%
  group_by(userKey, Trial, RiskyEV_bin,PHQ_binary) %>%
  summarise(
    mean_zhappy = mean(zHappy,na.rm=TRUE)
  ) 
mean_happy_ev_data_phq <- happy_data %>%
  mutate(abs_RiskyEV = RiskyEV_bin) %>%         # Use absolute RiskyEV
  group_by(userKey, Trial, PHQ_binary, abs_RiskyEV) %>%
  summarise(mean_z_happy = mean(mean_zhappy, na.rm = TRUE),
            .groups = 'drop')

# Now calculate the average across participants for each abs(RiskyEV), split by Trial and GAD group
overall_mean_happy_ev_data_phq <- mean_happy_ev_data_phq %>%
  group_by(Trial, PHQ_binary, abs_RiskyEV) %>%
  summarise(mean_z_happy_all = mean(mean_z_happy, na.rm = TRUE),
             sem_z_happy_all = sd(mean_z_happy, na.rm=TRUE) / sqrt(n()),
            .groups = 'drop')

# Plot the data with GAD splitting
ggplot(overall_mean_happy_ev_data_phq, aes(x = abs_RiskyEV, y = mean_z_happy_all, color = PHQ_binary, linetype = Trial, group = interaction(PHQ_binary, Trial))) +
  geom_line(size = 1) +                             # Ensure the line connects the points
  geom_point() +                                    # Points for clarity
  geom_errorbar(aes(ymin = mean_z_happy_all - sem_z_happy_all, ymax = mean_z_happy_all + sem_z_happy_all), width = 0.2) +  # Error bars for SEM
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Dotted line at y=0
  labs(x = "Absolute RiskyEV", y = "Mean z Happy Score",
       title = "Mean z Happy Score by Absolute RiskyEV (split by PHQ)",
       color = "PHQ Group", linetype = "Trial Type") +
  theme_minimal() +
  scale_color_manual(values = c("PHQ 7+" = "red", "PHQ <7" = "pink")) +  # Custom colors for GAD groups
  scale_linetype_manual(values = c("Gain" = "solid", "Loss" = "dotted")) +      # Solid for Gain, dotted for Loss
  poster_theme
```

### Happiness and Risky Taking across Relative EVs

```{r Risky Choices based on RelEV}
happyData1_ev <- happyData1 %>%
  mutate(SafeEV = SafeProb*SafeValue,
         RiskyEV = RiskyProb*RiskyValue,
         relEV = RiskyEV/SafeEV)

happyData1_ev <- happyData1 %>%
  mutate(SafeEV = abs(SafeProb * SafeValue),
         RiskyEV = abs(RiskyProb * RiskyValue),
         relEV = case_when(
           RiskyEV >= 2*SafeEV ~ "very high relEV",
           RiskyEV > SafeEV ~ "high relEV",
           RiskyEV == SafeEV ~ "equal relEV",
           RiskyEV < SafeEV ~ "low relEV"
         ),
         relEV = factor(relEV, levels = c("low relEV", "equal relEV", "high relEV","very high relEV"))) 

risky_data <- happyData1_ev %>%
  group_by(userKey, Trial, relEV) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),  # Assuming Choice == 2 indicates a risky choice
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  )


# Calculate the mean percent_risky per participant for each abs(RiskyEV)
mean_risky_ev_data <- risky_data %>%
  group_by(userKey, Trial, relEV) %>%
  summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
            .groups = 'drop')

# Now calculate the average across participants for each abs(RiskyEV), split by Trial
overall_mean_risky_ev_data <- mean_risky_ev_data %>%
  group_by(Trial, relEV) %>%
  summarise(mean_percent_risky_all = mean(mean_percent_risky, na.rm = TRUE),
            sem_percent_risky = sd(mean_percent_risky)/sqrt(n()),
            .groups = 'drop')

# Plot the data
ggplot(overall_mean_risky_ev_data, aes(x = relEV, y = mean_percent_risky_all, color = Trial, group=Trial)) +
  geom_line(size = 1) +                             # Ensure the line connects the points
  geom_point() +                                    # Points for clarity
  geom_errorbar(aes(ymin = mean_percent_risky_all - sem_percent_risky, ymax = mean_percent_risky_all + sem_percent_risky), width = 0.2) +  # Error bars for SEM
  geom_hline(yintercept = 50, linetype = "dotted", color = "black") +                              # Add points for clarity
  labs(x = "Relative EV (Risky vs Safe)", y = "Mean Percentage of Risky Choices",
       title = "Mean % of Risky Choices by Absolute RiskyEV",
       color = "Trial") +
  theme_minimal() +
  ylim(0, 100) +
  scale_color_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347"))  +
  poster_theme
```


# Gender x Anxiety Analyses

```{r Mergining Initquiz Data}
T_initquiz <- process_initquiz(initquiz_file)
happyData1_demo <- merge(happyData1, T_initquiz, by="userKey")

length(unique(happyData1_demo$userKey)) #4473
```

### anxiety, gender and z-scored happiness

```{r anxiety, gender and happiness}
risky_data <- happyData1_demo %>%
    group_by(userKey, Trial,gender_group) %>%
    summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              GAD_total = mean(gad7_total, na.rm = TRUE),  # Add GAD scores
             PHQ_total = mean(phq8_total, na.rm = TRUE),
              .groups = 'drop')


summary_data <- risky_data %>%
    group_by(Trial,gender_group) %>%
    summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
              se_percent_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
              .groups = 'drop') %>%
  na.omit()
  
  ggplot(summary_data, aes(x = Trial, y = mean_percent_risky, color = gender_group)) +
    geom_point(position = position_dodge(0.8), size = 3) +
    geom_errorbar(aes(ymin = mean_percent_risky - se_percent_risky, ymax = mean_percent_risky + se_percent_risky),position=position_dodge(0.8),
                  width = 0.2) +
    labs(
      title = "% Risky Choices (Play 1) N=4473",
      x = "Trial Type",
      y = "% Risky Choices"
    ) +
    theme_minimal() +
    ylim(40, 60) +  
    poster_theme + 
    scale_color_manual(values = c("Male" = "lightblue", "Female" = "pink","Other" = "purple"))
  
  
# correlations with GAD and PHQ
risky_data_males <- risky_data %>%
  filter(gender_group == "Male") %>%
  na.omit()

risky_data_females <- risky_data %>%
  filter(gender_group == "Female") %>%
  na.omit()

# males gain and loss gad
cor.test(risky_data_males$percent_risky[risky_data_males$Trial == "Gain"], risky_data_males$GAD_total[risky_data_males$Trial == "Gain"],method="spearman")
 cor.test(risky_data_males$percent_risky[risky_data_males$Trial == "Loss"], risky_data_males$GAD_total[risky_data_males$Trial == "Loss"],method="spearman")

# males gain and loss phq
cor.test(risky_data_males$percent_risky[risky_data_males$Trial == "Gain"], risky_data_males$PHQ_total[risky_data_males$Trial == "Gain"],method="spearman")
cor.test(risky_data_males$percent_risky[risky_data_males$Trial == "Loss"], risky_data_males$PHQ_total[risky_data_males$Trial == "Loss"],method="spearman")

# females gain and loss gad
cor.test(risky_data_females$percent_risky[risky_data_females$Trial == "Gain"], risky_data_females$GAD_total[risky_data_females$Trial == "Gain"],method="spearman")
cor.test(risky_data_females$percent_risky[risky_data_females$Trial == "Loss"], risky_data_females$GAD_total[risky_data_females$Trial == "Loss"],method="spearman")

# females gain and loss phq
cor.test(risky_data_females$percent_risky[risky_data_females$Trial == "Gain"], risky_data_females$PHQ_total[risky_data_females$Trial == "Gain"],method="spearman")
cor.test(risky_data_females$percent_risky[risky_data_females$Trial == "Loss"], risky_data_females$PHQ_total[risky_data_females$Trial == "Loss"],method="spearman") # in loss domain, % risk taking is correlated with phq only among females

```



### z-scored happiness across GAD groups, split by gender and domain 

```{r happiness across GAD bins, split by gender and domain}
# by Domain
summary_zHappy_1 <- happyData1_demo%>%
    group_by(userKey,Trial) %>%
    summarise(
      mean_zHappy_filled = mean(zHappy_filled, na.rm=TRUE),
      sd_zHappy_filled = sd(zHappy_filled, na.rm = TRUE),
      rsd_Happy_filled = relSD_tc(zHappy, -2, 2),
      GAD_score = first(gad7_total),
      PHQ_score = first(phq8_total),
      GAD_bin = first(GAD_bin),
      PHQ_bin = first(PHQ_bin),
      gamble_decisions = sum(Choice == 2, na.rm = TRUE),
      total_decisions = n(),
      percent_gamble = (gamble_decisions / total_decisions) * 100,
      const = first(const1_multi_z),
      tau = first(tau_multi_z),
      rpe = first(rpe_chosen_multi_z),
      ev = first(ev_chosen_multi_z),
      gender=first(gender_group)
    ) 

summary_bins <- summary_zHappy_1 %>%
    group_by(GAD_bin,gender,Trial) %>%
    summarise(
      mean_z_Happy_filled = mean(mean_zHappy_filled, na.rm = TRUE),
      sem_sd_Happy_filled = sd(mean_zHappy_filled, na.rm = TRUE) / sqrt(n())
    ) %>% na.omit()

ggplot(summary_bins, aes(x = GAD_bin, y = mean_z_Happy_filled, color=gender)) +
    geom_point(size = 3) +
    geom_errorbar(aes(ymin = mean_z_Happy_filled - sem_sd_Happy_filled, ymax = mean_z_Happy_filled + sem_sd_Happy_filled),
                  width = 0.2) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    labs(
      title = "Happiness by Anxiety",
      x = "Anxiety (GAD score)",
      y = "z-scored Happiness"
    ) +
  facet_wrap(~Trial) + 
  scale_color_manual(values = c("Male" = "lightblue", "Female" = "pink","Other"="purple")) + 
    theme_minimal() +
    poster_theme 


```

Doesn't look like any difference between males and females in terms of happiness association with GAD

### Future Information and Happiness based on Gender
```{r Future Information and Happiness Based on Gender}
current_pos_future_pos <- happyData1_demo %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey, gender_group) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(gender_group) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Gain")


current_pos_future_neg <- happyData1_demo %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey, gender_group) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(gender_group) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Gain")


current_neg_future_pos <- happyData1_demo %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey, gender_group) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(gender_group) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Loss")


current_neg_future_neg <- happyData1_demo %>%
  filter(NextIsland == 1 & LastIsland == 1., Trial == "Loss") %>%
  group_by(userKey, gender_group) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(gender_group) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Loss")


  # Combine results
combined_happy <- bind_rows(current_pos_future_pos, current_pos_future_neg, current_neg_future_pos,current_neg_future_neg)
combined_happy <- na.omit(combined_happy)

 ggplot(combined_happy, aes(x = Future, y = overall_mean_happiness, fill = gender_group, group=gender_group)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = overall_mean_happiness - sem_happiness, ymax = overall_mean_happiness + sem_happiness),
                  position = position_dodge(0.7), width = 0.2) +
    geom_point(aes(y = overall_mean_pred_happiness), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_fill_manual(values = c("Male" = "lightblue", "Female" = "pink", "Other"="purple")) +
    labs(
      title = "z-scored Happiness based on Future and Current",
      x = "Future",
      y = "z-scored Happiness"
    ) +
   facet_wrap(~Current) +
    theme_minimal() +
    poster_theme 
 

```

Looks like males are happier than females in loss domain when the future is positive. 


### Study Design
### Count the number of trials where the EV's fall into those bins.

```{r Study Design Plot}
happyData1_ev <- happyData1 %>%
  mutate(SafeEV = SafeProb*SafeValue,
         RiskyEV = RiskyProb*RiskyValue)

happyData1_ev <- happyData1_ev %>%
  mutate(RiskyEV_bin = cut(abs(RiskyEV), 
                           breaks = c(0, 9, 19, 29, 39, 49, Inf), 
                           labels = c("0-9", "10-19", "20-29", "30-39", "40-49", "50+"),
                           right = TRUE))

# Step 1: Count number of trials per RiskyEV_bin for each participant
risky_ev_counts <- happyData1_ev %>%
  group_by(userKey, RiskyEV_bin, Trial) %>%
  summarise(trial_count = n(), .groups = 'drop')  # Count the number of trials in each bin for each participant

# Step 2: Get the number of participants
num_participants <- n_distinct(happyData1_ev$userKey)

# Step 3: Summarize across participants to get the total trial count per bin for both Gain and Loss
# and then divide by the total number of trials (14 for each Trial type per participant) to get the percentage
average_risky_ev_percentage <- risky_ev_counts %>%
  group_by(RiskyEV_bin, Trial) %>%
  summarise(mean_trial_count_per_participant = sum(trial_count) / num_participants, .groups = 'drop') %>%
  mutate(percent_trials_per_participant = ifelse(Trial == "Gain", 
                                                 (mean_trial_count_per_participant / 14) * 100,  # 14 choices in Gain domain
                                                 (mean_trial_count_per_participant / 14) * 100))  # 14 choices in Loss domain

# Step 4: Visualize the percentages with a bar plot
ggplot(average_risky_ev_percentage, aes(x = RiskyEV_bin, y = percent_trials_per_participant, fill = Trial)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  labs(
    title = "Percentage of Trials per RiskyEV Bin (Per Participant)",
    x = "Risky EV Bin",
    y = "Percentage of Trials (%)"
  ) +
  scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +  # Colors for Gain and Loss
  theme_minimal() +
 poster_theme


```



### Happiness Model Parameters (Anx and Dep Diagnoses)

```{r Happiness Model Parameters, Split by Diagnoses}

# Count the number of people with anxiety (GAD_binary == 1) and without anxiety (GAD_binary == 0)
anxiety_counts <- happyData1_diag %>%
  distinct(userKey, .keep_all = TRUE) %>%  # Keep one row per user
  summarise(
    anx = sum(diagnosis_anxiety == "anx", na.rm = TRUE),
    no_anx = sum(diagnosis_anxiety == "no anx", na.rm = TRUE)
  )

# Count the number of people with depression (PHQ_binary == 1) and without depression (PHQ_binary == 0)
depression_counts <- happyData1_diag %>%
  distinct(userKey, .keep_all = TRUE) %>%  # Keep one row per user
  summarise(
    dep = sum(diagnosis_depression == "dep", na.rm = TRUE),
    no_dep = sum(diagnosis_depression == "no dep", na.rm = TRUE)
  )

# Print the results
print(anxiety_counts)
print(depression_counts)



### split by anxiety
summary_params <- happyData1_diag %>%
  filter(!is.na(diagnosis_anxiety)) %>%
  dplyr::select(diagnosis_anxiety, ev_chosen_multi_z, rpe_chosen_multi_z) %>%
  group_by(diagnosis_anxiety) %>% 
    pivot_longer(cols = c(ev_chosen_multi_z, rpe_chosen_multi_z), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, diagnosis_anxiety) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = diagnosis_anxiety)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
    scale_fill_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) +
    scale_x_discrete(labels = c("ev_chosen_multi_z" = "EV", "rpe_chosen_multi_z" = "RPE"))

  ### in play 1, looks like EV adn RPE are lowere for people with anxiety diagnoses
  ### in play 2, people with anxiety have higher EV and RPE
  
### split by PHQ
  summary_params <- happyData1_diag %>%
  dplyr::select(diagnosis_depression, ev_chosen_multi_z, rpe_chosen_multi_z) %>%
  group_by(diagnosis_depression) %>% 
    pivot_longer(cols = c(ev_chosen_multi_z, rpe_chosen_multi_z), 
                 names_to = "parameter", 
                 values_to = "value") %>%
    group_by(parameter, diagnosis_depression) %>%
    summarise(
      mean_value = mean(value, na.rm = TRUE),
      se_value = sd(value, na.rm = TRUE) / sqrt(n())
    ) %>%
    na.omit() 


  # Generate the plot
  ggplot(summary_params, aes(x = parameter, y = mean_value, fill = diagnosis_depression)) +
    geom_bar(stat = "identity", position = position_dodge(), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value),
                  position = position_dodge(0.7), width = 0.2) +
    labs(
      x = "Parameter",
      y = "Parameter Estimate",
    ) +
    theme_minimal() +
    poster_theme + 
    scale_fill_manual(values = c("dep" = "red", "no dep" = "pink")) +
    scale_x_discrete(labels = c("ev_chosen_multi_z" = "EV", "rpe_chosen_multi_z" = "RPE"))
  
  ### EV and RPE are lower for people with diagnoses depression in play 1
  ### in play 2, EV is higher for people with diagnosed depression, and RPE is lower
```

### % Risky Choices with Future and Diagnosis Information Split by Diagnosis

```{r Risky Choices with Future and Diagnosis Information Split by Diagnosis}
  positive_risky <- happyData1_diag %>%
  filter(NextIsland == 2 & LastIsland == 2) %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(diagnosis_anxiety) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive")
  

  # Calculate mean happiness and predicted happiness for NextIsland == 1 within subjects
negative_risky <- happyData1_diag %>%
  filter(NextIsland == 1 & LastIsland == 1) %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(diagnosis_anxiety) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative")

  # Combine results
combined_risky <- bind_rows(positive_risky, negative_risky)
combined_risky <- na.omit(combined_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = diagnosis_anxiety, group = diagnosis_anxiety)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_line(position = position_dodge(0.7), aes(group = diagnosis_anxiety)) +  # Add lines connecting points within groups

    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) +
    labs(
      title = "% Risky Choices based on Future (Play 2) N=1922",
      x = "Future",
      y = "% Risky Choices"
    ) +
    ylim(45,60) + 
    theme_minimal() +
    poster_theme 
  
  ### people with no anxiety gamble more when the future is positive vs negative
  ### people with anxiety show similar behaviour regardless of future prospects
  
  
  ## depression
  
   positive_risky <- happyData1_diag %>%
  filter(NextIsland == 2 & LastIsland == 2) %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(diagnosis_depression) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive")
  

  # Calculate mean happiness and predicted happiness for NextIsland == 1 within subjects
negative_risky <- happyData1_diag %>%
  filter(NextIsland == 1 & LastIsland == 1) %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(diagnosis_depression) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative")

  # Combine results
combined_risky <- bind_rows(positive_risky, negative_risky)
combined_risky <- na.omit(combined_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = diagnosis_depression, group = diagnosis_depression)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
        geom_line(position = position_dodge(0.7), aes(group = diagnosis_depression)) +  # Add lines connecting points within groups

    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("dep" = "coral", "no dep" = "pink")) +
    labs(
      title = "% Risky Choices based on Future (Play 2) N=1922",
      x = "Future",
      y = "% Risky Choices"
    ) +
    ylim(45,60) + 
    theme_minimal() +
    poster_theme 
  
```


### % Risky Choices with Future, Current Domain and Diagnosis Information

```{r Risky Choices with Future, Current Domain and Diagnosis Information Split by Anxiety Diagnosis}
current_pos_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(diagnosis_anxiety) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Gain")
  

current_pos_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(diagnosis_anxiety) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Gain")


current_neg_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(diagnosis_anxiety) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Loss")


    
current_neg_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & LastIsland == 1, Trial == "Loss") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(diagnosis_anxiety) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Loss")

      
  # Combine results
combined_risky <- bind_rows(current_pos_future_pos, current_pos_future_neg,current_neg_future_pos,current_neg_future_neg)
combined_risky <- na.omit(combined_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = diagnosis_anxiety, group = Current)) +
    geom_point(position = position_dodge(1), width = 0.7,group="diagnosis_anxiety") +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(1), width = 0.2, group="diagnosis_anxiety") + 
        geom_line(position = position_dodge(0.7), aes(group = diagnosis_anxiety)) +  # Add lines connecting points within groups

    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) +
    labs(
      title = "% Risky Choices based on Future (Play 1) N=5393",
      x = "Future",
      y = "% Risky Choices"
    ) +
    facet_wrap(~Current) +
    ylim(40,60) + 
    theme_minimal() +
    poster_theme 
  
  ### people with no anxiety take significantly more risks in loss domains when the future is positive compared to negative.
  ### people with anxiety behave similarly in loss domains regardless of future prospects
  ### in gain domains, everyone gambles more when the future is positive versus negative
  
  
  # neg vs positive
  # t.test
### GAIN
neg_vs_pos_gain <- happyData1_diag %>%
  filter((NextIsland == 2 & LastIsland == 2 | NextIsland == 1 & LastIsland == 1) & 
         Trial == "Gain") %>%
  group_by(userKey, Future = if_else(NextIsland == 2 & LastIsland == 2, "Positive", "Negative")) %>%
  summarise(total_choices = n(),
            risky_choices = sum(Choice == 2, na.rm = TRUE),
            percent_risky = (risky_choices / total_choices) * 100,
            GAD_score = first(gad7_total),
            diagnosis_anxiety = first(diagnosis_anxiety),
            .groups = 'drop')

wilcox_test_gain_anxious <- wilcox.test(percent_risky ~ Future, 
                                        data = neg_vs_pos_gain %>% filter(diagnosis_anxiety == "anx"))

wilcox_test_gain_non_anxious <- wilcox.test(percent_risky ~ Future, 
                                            data = neg_vs_pos_gain %>% filter(diagnosis_anxiety == "no anx"))

print(wilcox_test_gain_anxious)
print(wilcox_test_gain_non_anxious)

### LOSS
neg_vs_pos_loss <- happyData1_diag %>%
  filter((NextIsland == 2 & LastIsland == 2 | NextIsland == 1 & LastIsland == 1) & 
         Trial == "Loss") %>%
  group_by(userKey, Future = if_else(NextIsland == 2 & LastIsland == 2, "Positive", "Negative")) %>%
  summarise(total_choices = n(),
            risky_choices = sum(Choice == 2, na.rm = TRUE),
            percent_risky = (risky_choices / total_choices) * 100,
            GAD_score = first(gad7_total),
            diagnosis_anxiety = first(diagnosis_anxiety),
            .groups = 'drop')

wilcox_test_loss_anxious <- wilcox.test(percent_risky ~ Future, 
                                        data = neg_vs_pos_loss %>% filter(diagnosis_anxiety == "anx"))

wilcox_test_loss_non_anxious <- wilcox.test(percent_risky ~ Future, 
                                            data = neg_vs_pos_loss %>% filter(diagnosis_anxiety == "no anx"))

# Output results
print(wilcox_test_loss_anxious)
print(wilcox_test_loss_non_anxious)
```

### NextIsland Only

```{r Risky Choices with NextIsland, Current Domain and Diagnosis Information Split by Anxiety Diagnosis}

current_pos_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & Trial == "Gain") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(diagnosis_anxiety) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Gain")
  

current_pos_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & Trial == "Gain") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(diagnosis_anxiety) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Gain")


current_neg_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & Trial == "Loss") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(diagnosis_anxiety) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Loss")


    
current_neg_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & Trial == "Loss") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(diagnosis_anxiety) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Loss")

      
  # Combine results
combined_risky <- bind_rows(current_pos_future_pos, current_pos_future_neg,current_neg_future_pos,current_neg_future_neg)
combined_risky <- na.omit(combined_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = diagnosis_anxiety, group = Current)) +
    geom_point(position = position_dodge(1), width = 0.7,group="diagnosis_anxiety") +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(1), width = 0.2, group="diagnosis_anxiety") + 
        geom_line(position = position_dodge(1), aes(group = diagnosis_anxiety)) +  # Add lines connecting points within groups

    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) +
    labs(
title = paste0("% Risky Choices based on Future (N=", sample_size, ")"),
      x = "Future",
      y = "% Risky Choices"
    ) +
    facet_wrap(~Current) +
    ylim(40,60) + 
    theme_minimal() +
    poster_theme 
``` 
  
```{r Depression Diagnosis, NextIsland and LastIsland}
### depression
  
current_pos_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(diagnosis_depression) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Gain")


current_pos_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(diagnosis_depression) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Gain")


current_neg_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(diagnosis_depression) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Loss")


    
current_neg_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & LastIsland == 1, Trial == "Loss") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(diagnosis_depression) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Loss")

      
  # Combine results
combined_risky <- bind_rows(current_pos_future_pos, current_pos_future_neg,current_neg_future_pos,current_neg_future_neg)
combined_risky <- na.omit(combined_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = diagnosis_depression, group = Current)) +
    geom_point(position = position_dodge(1), width = 0.7,group="diagnosis_depression") +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(1), width = 0.2, group="diagnosis_depression") + 
            geom_line(position = position_dodge(0.7), aes(group = diagnosis_depression)) +  # Add lines connecting points within groups
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("dep" = "coral", "no dep" = "pink")) +
    labs(
      title = "% Risky Choices based on Future (Play 1) N=5393",
      x = "Future",
      y = "% Risky Choices"
    ) +
    facet_wrap(~Current) +
    ylim(40,60) + 
    theme_minimal() +
    poster_theme 
  
  # t.test
### GAIN
neg_vs_pos_gain <- happyData1_diag %>%
  filter((NextIsland == 2 & LastIsland == 2 | NextIsland == 1 & LastIsland == 1) & 
         Trial == "Gain") %>%
  group_by(userKey, Future = if_else(NextIsland == 2 & LastIsland == 2, "Positive", "Negative")) %>%
  summarise(total_choices = n(),
            risky_choices = sum(Choice == 2, na.rm = TRUE),
            percent_risky = (risky_choices / total_choices) * 100,
            GAD_score = first(gad7_total),
            diagnosis_depression = first(diagnosis_depression),
            .groups = 'drop')

wilcox_test_loss_depression <- wilcox.test(percent_risky ~ Future, 
                                        data = neg_vs_pos_gain %>% filter(diagnosis_depression == "dep"))

wilcox_test_loss_non_depression <- wilcox.test(percent_risky ~ Future, 
                                            data = neg_vs_pos_gain %>% filter(diagnosis_depression == "no dep"))

print(wilcox_test_loss_depression)
print(wilcox_test_loss_non_depression)

### LOSS
neg_vs_pos_loss <- happyData1_diag %>%
  filter((NextIsland == 2 & LastIsland == 2 | NextIsland == 1 & LastIsland == 1) & 
         Trial == "Loss") %>%
  group_by(userKey, Future = if_else(NextIsland == 2 & LastIsland == 2, "Positive", "Negative")) %>%
  summarise(total_choices = n(),
            risky_choices = sum(Choice == 2, na.rm = TRUE),
            percent_risky = (risky_choices / total_choices) * 100,
            GAD_score = first(gad7_total),
            diagnosis_depression = first(diagnosis_depression),
            .groups = 'drop')

wilcox_test_loss_depression <- wilcox.test(percent_risky ~ Future, 
                                        data = neg_vs_pos_loss %>% filter(diagnosis_depression == "dep"))

wilcox_test_loss_non_depression <- wilcox.test(percent_risky ~ Future, 
                                            data = neg_vs_pos_loss %>% filter(diagnosis_depression == "no dep"))

# Output results
print(wilcox_test_loss_depression)
print(wilcox_test_loss_non_depression)
  
```

```{r Depression Diagnosis, NextIsland}
### depression
  
current_pos_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & Trial == "Gain") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(diagnosis_depression) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Gain")


current_pos_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & Trial == "Gain") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
    group_by(diagnosis_depression) %>%
    summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Gain")


current_neg_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & Trial == "Loss") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(diagnosis_depression) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Positive",
         Current = "Loss")


    
current_neg_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & Trial == "Loss") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  group_by(diagnosis_depression) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
            .groups = 'drop') %>%
  mutate(Future = "Negative",
         Current = "Loss")

      
  # Combine results
combined_risky <- bind_rows(current_pos_future_pos, current_pos_future_neg,current_neg_future_pos,current_neg_future_neg)
combined_risky <- na.omit(combined_risky)

  # Plotting
  ggplot(combined_risky, aes(x = Future, y = mean_risky,  color = diagnosis_depression, group = Current)) +
    geom_point(position = position_dodge(1), width = 0.7,group="diagnosis_depression") +
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(1), width = 0.2, group="diagnosis_depression") + 
            geom_line(position = position_dodge(1), aes(group = diagnosis_depression)) +  # Add lines connecting points within groups
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("dep" = "coral", "no dep" = "pink")) +
    labs(
title = paste0("% Risky Choices based on Future (N=", sample_size, ")"),
      x = "Future",
      y = "% Risky Choices"
    ) +
    facet_wrap(~Current) +
    ylim(40,60) + 
    theme_minimal() +
    poster_theme 
```
  
### Happiness Based on Future, Split by Diagnoses

```{r Happiness Based on Future and Current Domain, Split by Diagnoses}
current_pos_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(diagnosis_anxiety) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Gain")


current_pos_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(diagnosis_anxiety) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Gain")



current_neg_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(diagnosis_anxiety) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Loss")



current_neg_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & LastIsland == 1., Trial == "Loss") %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(diagnosis_anxiety) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Loss")



  # Combine results
combined_happy <- bind_rows(current_pos_future_pos, current_pos_future_neg, current_neg_future_pos,current_neg_future_neg)
combined_happy <- na.omit(combined_happy)



 ggplot(combined_happy, aes(x = Future, y = overall_mean_happiness, fill = diagnosis_anxiety, group=diagnosis_anxiety)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = overall_mean_happiness - sem_happiness, ymax = overall_mean_happiness + sem_happiness),
                  position = position_dodge(0.7), width = 0.2) +
    geom_point(aes(y = overall_mean_pred_happiness), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_fill_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) +
    labs(
      title = "z-scored Happiness based on Future and Current",
      x = "Future",
      y = "z-scored Happiness"
    ) +
   facet_wrap(~Current) +
    theme_minimal() +
    poster_theme 
 
 
 ## dDepression Diagnosis
 
 current_pos_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & LastIsland == 2 & Trial == "Gain") %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(diagnosis_depression) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Gain")


current_pos_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & LastIsland == 1 & Trial == "Gain") %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(diagnosis_depression) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Gain")



current_neg_future_pos <- happyData1_diag %>%
  filter(NextIsland == 2 & LastIsland == 2, Trial == "Loss") %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(diagnosis_depression) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Positive",
         Current = "Loss")



current_neg_future_neg <- happyData1_diag %>%
  filter(NextIsland == 1 & LastIsland == 1., Trial == "Loss") %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(mean_happiness = mean(zHappy, na.rm = TRUE),
            mean_pred_happiness = mean(zHappyPred, na.rm = TRUE), 
            .groups = 'drop') %>%
  group_by(diagnosis_depression) %>%
  summarise(overall_mean_happiness = mean(mean_happiness, na.rm = TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
            overall_mean_pred_happiness = mean(mean_pred_happiness, na.rm = TRUE),
            .groups = 'drop')  %>%
  mutate(Future = "Negative",
         Current = "Loss")



  # Combine results
combined_happy <- bind_rows(current_pos_future_pos, current_pos_future_neg, current_neg_future_pos,current_neg_future_neg)
combined_happy <- na.omit(combined_happy)



 ggplot(combined_happy, aes(x = Future, y = overall_mean_happiness, fill = diagnosis_depression, group=diagnosis_depression)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = overall_mean_happiness - sem_happiness, ymax = overall_mean_happiness + sem_happiness),
                  position = position_dodge(0.7), width = 0.2) +
    geom_point(aes(y = overall_mean_pred_happiness), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    scale_fill_manual(values = c("dep" = "coral", "no dep" = "pink")) +
    labs(
      title = "z-scored Happiness based on Future and Current",
      x = "Future",
      y = "z-scored Happiness"
    ) +
   facet_wrap(~Current) +
    theme_minimal() +
    poster_theme 
```

### Happiness Based on Choice and Domain and Diagnosis

```{r Happiness Based on Choice and Domain and Diagnosis}

choice_risky_gain <- happyData1_diag %>%
  filter(Choice == 2 & Trial =="Gain" & !is.na(diagnosis_anxiety)) %>%
  group_by(userKey ,diagnosis_anxiety) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")

choice_risky_loss <- happyData1_diag %>%
  filter(Choice == 2 & Trial =="Loss" & !is.na(diagnosis_anxiety)) %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")
  
# safe choice
choice_safe_gain <- happyData1_diag %>%
  filter(Choice == 1 & Trial=="Gain" & !is.na(diagnosis_anxiety)) %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Gain")

choice_safe_loss <- happyData1_diag %>%
  filter(Choice == 1 & Trial=="Loss" & !is.na(diagnosis_anxiety)) %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Loss")

  
choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice,Current,diagnosis_anxiety) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  fill = diagnosis_anxiety, group = diagnosis_anxiety)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
  scale_fill_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) + 
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) + 
  facet_wrap(~Current) + 
    theme_minimal() +
    poster_theme

# in play 1: people with anxiety are less happy playing it safe in gain domains compared to people without anxiety
# hedheb i mss u 

# Filter for Gain domain and summarize by diagnosis group
gain_risky_data <- happyData1_diag %>%
  filter(Trial == "Gain" & Choice == 2 & !is.na(diagnosis_anxiety)) %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            .groups = 'drop')

gain_safe_data <- happyData1_diag %>%
  filter(Trial == "Gain" & Choice == 1 & !is.na(diagnosis_anxiety)) %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            .groups = 'drop')

# Wilcoxon test for Gain Risky between anx vs no anx
wilcox_test_gain_risky <- wilcox.test(mean_zhappy ~ diagnosis_anxiety, 
                                      data = gain_risky_data)

# Wilcoxon test for Gain Safe between anx vs no anx
wilcox_test_gain_safe <- wilcox.test(mean_zhappy ~ diagnosis_anxiety, 
                                     data = gain_safe_data)

print(wilcox_test_gain_risky)
print(wilcox_test_gain_safe)


# loss domain
loss_risky_data <- happyData1_diag %>%
  filter(Trial == "Loss" & Choice == 2 & !is.na(diagnosis_anxiety)) %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            .groups = 'drop')

loss_safe_data <- happyData1_diag %>%
  filter(Trial == "Loss" & Choice == 1 & !is.na(diagnosis_anxiety)) %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            .groups = 'drop')

# Wilcoxon test for Gain Risky between anx vs no anx
wilcox_test_loss_risky <- wilcox.test(mean_zhappy ~ diagnosis_anxiety, 
                                      data = loss_risky_data)

# Wilcoxon test for Gain Safe between anx vs no anx
wilcox_test_loss_safe <- wilcox.test(mean_zhappy ~ diagnosis_anxiety, 
                                     data = loss_safe_data)

print(wilcox_test_loss_risky)
print(wilcox_test_loss_safe)




## depression
choice_risky_gain <- happyData1_diag %>%
  filter(Choice == 2 & Trial =="Gain" & !is.na(diagnosis_depression)) %>%
  group_by(userKey ,diagnosis_depression) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Gain")

choice_risky_loss <- happyData1_diag %>%
  filter(Choice == 2 & Trial =="Loss" & !is.na(diagnosis_depression)) %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Risky",
         Current = "Loss")
  
# safe choice
choice_safe_gain <- happyData1_diag %>%
  filter(Choice == 1 & Trial=="Gain" & !is.na(diagnosis_depression)) %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Gain")

choice_safe_loss <- happyData1_diag %>%
  filter(Choice == 1 & Trial=="Loss" & !is.na(diagnosis_depression)) %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            mean_zpredhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Choice = "Safe",
        Current = "Loss")

  
choice_combined <- bind_rows(choice_risky_gain, choice_risky_loss,choice_safe_gain,choice_safe_loss)
summary_choice <- choice_combined %>%
    group_by(Choice,Current,diagnosis_depression) %>% 
  summarise(mean_happy = mean(mean_zhappy,na.rm=TRUE),
            mean_predhappy = mean(mean_zpredhappy,na.rm=TRUE),
            sem_happy = sd(mean_zhappy, na.rm = TRUE) / sqrt(n()),
            sem_predhappy = sd(mean_zpredhappy, na.rm = TRUE) / sqrt(n()))


ggplot(summary_choice, aes(x = Choice, y = mean_happy,  fill = diagnosis_depression, group = diagnosis_depression)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = mean_happy - sem_happy, ymax = mean_happy + sem_happy),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
  scale_fill_manual(values = c("dep" = "coral", "no dep" = "pink")) + 
    labs(
      title = "Happiness  (z-scored) Based on Choice",
      x = "Choice",
      y = "zHappy"
    ) + 
  facet_wrap(~Current) + 
    theme_minimal() +
    poster_theme

# in play 1: people with anxiety are less happy playing it safe in gain domains compared to people without anxiety
# hedheb i mss u 

# Filter for Gain domain and summarize by diagnosis group
gain_risky_data <- happyData1_diag %>%
  filter(Trial == "Gain" & Choice == 2 & !is.na(diagnosis_depression)) %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            .groups = 'drop')

gain_safe_data <- happyData1_diag %>%
  filter(Trial == "Gain" & Choice == 1 & !is.na(diagnosis_depression)) %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            .groups = 'drop')

# Wilcoxon test for Gain Risky between anx vs no anx
wilcox_test_gain_risky <- wilcox.test(mean_zhappy ~ diagnosis_depression, 
                                      data = gain_risky_data)

# Wilcoxon test for Gain Safe between anx vs no anx
wilcox_test_gain_safe <- wilcox.test(mean_zhappy ~ diagnosis_depression, 
                                     data = gain_safe_data)

print(wilcox_test_gain_risky)
print(wilcox_test_gain_safe)


# loss domain
loss_risky_data <- happyData1_diag %>%
  filter(Trial == "Loss" & Choice == 2 & !is.na(diagnosis_depression)) %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            .groups = 'drop')

loss_safe_data <- happyData1_diag %>%
  filter(Trial == "Loss" & Choice == 1 & !is.na(diagnosis_depression)) %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(mean_zhappy = mean(zHappy, na.rm = TRUE),
            .groups = 'drop')

# Wilcoxon test for Gain Risky between anx vs no anx
wilcox_test_loss_risky <- wilcox.test(mean_zhappy ~ diagnosis_depression, 
                                      data = loss_risky_data)

# Wilcoxon test for Gain Safe between anx vs no anx
wilcox_test_loss_safe <- wilcox.test(mean_zhappy ~ diagnosis_depression, 
                                     data = loss_safe_data)

print(wilcox_test_loss_risky)
print(wilcox_test_loss_safe)

```

### Happiness Based on Probability and Happiness Based on Value, Split by Diagnosis

```{r Happiness and EV}

happyData1_ev <- happyData1_diag %>%
  mutate(SafeEV = SafeProb*SafeValue,
         RiskyEV = RiskyProb*RiskyValue)

happyData1_ev <- happyData1_ev %>%
  mutate(RiskyEV_bin = cut(abs(RiskyEV), 
                           breaks = c(0, 9, 19, 29, 39, 49, Inf), 
                           labels = c("0-9", "10-19", "20-29", "30-39", "40-49", "50+"),
                           right = TRUE))

## split by anxiety diagnosis
risky_data <- happyData1_ev %>%
  filter(!is.na(diagnosis_anxiety)) %>%
  group_by(userKey, Trial, RiskyEV_bin, diagnosis_anxiety) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),  # Assuming Choice == 2 indicates a risky choice
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  )

mean_risky_ev_data_gad <- risky_data %>%
  mutate(abs_RiskyEV = RiskyEV_bin) %>%
  group_by(userKey, Trial, diagnosis_anxiety, abs_RiskyEV) %>%
  summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
            .groups = 'drop')

overall_mean_risky_ev_data_gad <- mean_risky_ev_data_gad %>%
  group_by(Trial, diagnosis_anxiety, abs_RiskyEV) %>%
  summarise(mean_percent_risky_all = mean(mean_percent_risky, na.rm = TRUE),
            sem_percent_risky_all = sd(mean_percent_risky)/sqrt(n()),
            .groups = 'drop')

# Create the plot
ggplot(overall_mean_risky_ev_data_gad, aes(x = abs_RiskyEV, y = mean_percent_risky_all, color = diagnosis_anxiety, linetype = Trial, group = interaction(diagnosis_anxiety, Trial))) +
  geom_line(size = 1)+   
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") + 
  geom_errorbar(aes(ymin = mean_percent_risky_all - sem_percent_risky_all, ymax = mean_percent_risky_all + sem_percent_risky_all), width = 0.2) +  # Error bars for SEM
  geom_point() +                                              # Points for clarity
  labs(x = "Absolute RiskyEV", y = "Mean Percentage of Risky Choices",
       title = "Mean % of Risky Choices by Absolute RiskyEV (split by GAD)",
       color = "GAD Group", linetype = "Trial Type") +
  theme_minimal() +
  ylim(0, 100) +
  scale_color_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) +  # Custom colors for GAD groups
  scale_linetype_manual(values = c("Gain" = "solid", "Loss" = "dotted")) + 
  poster_theme 


## depression

risky_data <- happyData1_ev %>%
  filter(!is.na(diagnosis_depression)) %>%
  group_by(userKey, Trial, RiskyEV_bin, diagnosis_depression) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),  # Assuming Choice == 2 indicates a risky choice
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  )

mean_risky_ev_data_phq <- risky_data %>%
  mutate(abs_RiskyEV = RiskyEV_bin) %>%
  group_by(userKey, Trial, diagnosis_depression, abs_RiskyEV) %>%
  summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
            .groups = 'drop')

overall_mean_risky_ev_data_phq <- mean_risky_ev_data_phq %>%
  group_by(Trial, diagnosis_depression, abs_RiskyEV) %>%
  summarise(mean_percent_risky_all = mean(mean_percent_risky, na.rm = TRUE),
            sem_percent_risky_all = sd(mean_percent_risky) / sqrt(n()),
            .groups = 'drop')

# Create the plot
ggplot(overall_mean_risky_ev_data_phq, aes(x = abs_RiskyEV, y = mean_percent_risky_all, color = diagnosis_depression, linetype = Trial, group = interaction(diagnosis_depression, Trial))) +
  geom_line(size = 1) +   
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") + 
    geom_errorbar(aes(ymin = mean_percent_risky_all - sem_percent_risky_all, ymax = mean_percent_risky_all + sem_percent_risky_all), width = 0.2) +  # Error bars for SEM

  geom_point() +                                              # Points for clarity
  labs(x = "Absolute RiskyEV", y = "Mean Percentage of Risky Choices",
       title = "Mean % of Risky Choices by Absolute RiskyEV (split by PHQ)",
       color = "PHQ Group", linetype = "Trial Type") +
  theme_minimal() +
  ylim(0, 100) +
  scale_color_manual(values = c("dep" = "coral", "no dep" = "pink")) +  # Custom colors for GAD groups
  scale_linetype_manual(values = c("Gain" = "solid", "Loss" = "dotted")) + 
  poster_theme 
  
```

### % Risk Taking Based on Probability

```{r}
happyData1_ev <- happyData1_diag %>%
  mutate(SafeEV = SafeProb*SafeValue,
         RiskyEV = RiskyProb*RiskyValue)

happyData1_ev <- happyData1_ev %>%
  mutate(RiskyEV_bin = cut(abs(RiskyEV), 
                           breaks = c(0, 9, 19, 29, 39, 49, Inf), 
                           labels = c("0-9", "10-19", "20-29", "30-39", "40-49", "50+"),
                           right = TRUE))

## split by anxiety diagnosis
risky_data <- happyData1_ev %>%
  filter(!is.na(diagnosis_anxiety)) %>%
  group_by(userKey, Trial, RiskyProb, diagnosis_anxiety) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),  # Assuming Choice == 2 indicates a risky choice
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  )

mean_risky_ev_data_gad <- risky_data %>%
  group_by(userKey, Trial, diagnosis_anxiety, RiskyProb) %>%
  summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
            .groups = 'drop')

overall_mean_risky_ev_data_gad <- mean_risky_ev_data_gad %>%
  group_by(Trial, diagnosis_anxiety, RiskyProb) %>%
  summarise(mean_percent_risky_all = mean(mean_percent_risky, na.rm = TRUE),
            sem_percent_risky_all = sd(mean_percent_risky)/sqrt(n()),
            .groups = 'drop')

# Create the plot
ggplot(overall_mean_risky_ev_data_gad, aes(x = RiskyProb, y = mean_percent_risky_all, color = diagnosis_anxiety, linetype = Trial, group = interaction(diagnosis_anxiety, Trial))) +
  geom_line(size = 1)+   
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") + 
  geom_errorbar(aes(ymin = mean_percent_risky_all - sem_percent_risky_all, ymax = mean_percent_risky_all + sem_percent_risky_all), width = 0.05) +  # Error bars for SEM
  geom_point() +                                              # Points for clarity
  labs(x = " RiskyProb", y = "Mean Percentage of Risky Choices",
       title = "Mean % of Risky Choices by  RiskyProb (split by GAD)",
       color = "GAD Group", linetype = "Trial Type") +
  theme_minimal() +
  ylim(25, 80) +
  xlim(0, 0.9) + 
  scale_color_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) +  # Custom colors for GAD groups
  scale_linetype_manual(values = c("Gain" = "solid", "Loss" = "dotted")) + 
  poster_theme 

## depression
risky_data <- happyData1_ev %>%
  filter(!is.na(diagnosis_depression)) %>%
  group_by(userKey, Trial, RiskyProb, diagnosis_depression) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),  # Assuming Choice == 2 indicates a risky choice
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  )

mean_risky_ev_data_gad <- risky_data %>%
  group_by(userKey, Trial, diagnosis_depression, RiskyProb) %>%
  summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
            .groups = 'drop')

overall_mean_risky_ev_data_gad <- mean_risky_ev_data_gad %>%
  group_by(Trial, diagnosis_depression, RiskyProb) %>%
  summarise(mean_percent_risky_all = mean(mean_percent_risky, na.rm = TRUE),
            sem_percent_risky_all = sd(mean_percent_risky)/sqrt(n()),
            .groups = 'drop')

# Create the plot
ggplot(overall_mean_risky_ev_data_gad, aes(x = RiskyProb, y = mean_percent_risky_all, color = diagnosis_depression, linetype = Trial, group = interaction(diagnosis_depression, Trial))) +
  geom_line(size = 1)+   
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") + 
  geom_errorbar(aes(ymin = mean_percent_risky_all - sem_percent_risky_all, ymax = mean_percent_risky_all + sem_percent_risky_all), width = 0.05) +  # Error bars for SEM
  geom_point() +                                              # Points for clarity
  labs(x = " RiskyProb", y = "Mean Percentage of Risky Choices",
       title = "Mean % of Risky Choices by  RiskyProb (split by GAD)",
       color = "GAD Group", linetype = "Trial Type") +
  theme_minimal() +
  ylim(25, 80) +
  xlim(0, 0.9) + 
  scale_color_manual(values = c("dep" = "coral", "no dep" = "pink")) +  # Custom colors for GAD groups
  scale_linetype_manual(values = c("Gain" = "solid", "Loss" = "dotted")) + 
  poster_theme 
```
### % Risk Taking based on Magnitude (Value)

```{r Risk-Taking Split by Diagnosis (based on Value and Probability)}
happyData1_ev <- happyData1_diag %>%
  mutate(SafeEV = SafeProb*SafeValue,
         RiskyEV = RiskyProb*RiskyValue)

happyData1_ev <- happyData1_ev %>%
  mutate(RiskyEV_bin = cut(abs(RiskyEV), 
                           breaks = c(0, 9, 19, 29, 39, 49, Inf), 
                           labels = c("0-9", "10-19", "20-29", "30-39", "40-49", "50+"),
                           right = TRUE)) %>%
  mutate(abs_RiskyValue = abs(RiskyValue))

## split by anxiety diagnosis
risky_data <- happyData1_ev %>%
  filter(!is.na(diagnosis_anxiety)) %>%
  group_by(userKey, Trial, abs_RiskyValue, diagnosis_anxiety) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),  # Assuming Choice == 2 indicates a risky choice
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  )

mean_risky_ev_data_gad <- risky_data %>%
  group_by(userKey, Trial, diagnosis_anxiety, abs_RiskyValue) %>%
  summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
            .groups = 'drop')

overall_mean_risky_ev_data_gad <- mean_risky_ev_data_gad %>%
  group_by(Trial, diagnosis_anxiety, abs_RiskyValue) %>%
  summarise(mean_percent_risky_all = mean(mean_percent_risky, na.rm = TRUE),
            sem_percent_risky_all = sd(mean_percent_risky)/sqrt(n()),
            .groups = 'drop')

# Create the plot
ggplot(overall_mean_risky_ev_data_gad, aes(x = abs_RiskyValue, y = mean_percent_risky_all, color = diagnosis_anxiety, linetype = Trial, group = interaction(diagnosis_anxiety, Trial))) +
  geom_line(size = 1)+   
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") + 
  geom_errorbar(aes(ymin = mean_percent_risky_all - sem_percent_risky_all, ymax = mean_percent_risky_all + sem_percent_risky_all), width = 2) +  # Error bars for SEM
  geom_point() +                                              # Points for clarity
  labs(x = " RiskyProb", y = "Mean Percentage of Risky Choices",
       title = "Mean % of Risky Choices by  RiskyProb (split by GAD)",
       color = "GAD Group", linetype = "Trial Type") +
  theme_minimal() +
  ylim(25, 80) +
  scale_color_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) +  # Custom colors for GAD groups
  scale_linetype_manual(values = c("Gain" = "solid", "Loss" = "dotted")) + 
  poster_theme 

## depression
risky_data <- happyData1_ev %>%
  filter(!is.na(diagnosis_depression)) %>%
  group_by(userKey, Trial, abs_RiskyValue, diagnosis_depression) %>%
  summarise(
    total_choices = n(),
    risky_choices = sum(Choice == 2, na.rm = TRUE),  # Assuming Choice == 2 indicates a risky choice
    percent_risky = (risky_choices / total_choices) * 100,
    .groups = 'drop'
  )

mean_risky_ev_data_gad <- risky_data %>%
  group_by(userKey, Trial, diagnosis_depression, abs_RiskyValue) %>%
  summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
            .groups = 'drop')

overall_mean_risky_ev_data_gad <- mean_risky_ev_data_gad %>%
  group_by(Trial, diagnosis_depression, abs_RiskyValue) %>%
  summarise(mean_percent_risky_all = mean(mean_percent_risky, na.rm = TRUE),
            sem_percent_risky_all = sd(mean_percent_risky)/sqrt(n()),
            .groups = 'drop')

# Create the plot
ggplot(overall_mean_risky_ev_data_gad, aes(x = abs_RiskyValue, y = mean_percent_risky_all, color = diagnosis_depression, linetype = Trial, group = interaction(diagnosis_depression, Trial))) +
  geom_line(size = 1)+   
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") + 
  geom_errorbar(aes(ymin = mean_percent_risky_all - sem_percent_risky_all, ymax = mean_percent_risky_all + sem_percent_risky_all), width = 2) +  # Error bars for SEM
  geom_point() +                                              # Points for clarity
  labs(x = " RiskyProb", y = "Mean Percentage of Risky Choices",
       title = "Mean % of Risky Choices by  RiskyProb (split by GAD)",
       color = "GAD Group", linetype = "Trial Type") +
  theme_minimal() +
  ylim(25, 80) +
  scale_color_manual(values = c("dep" = "coral", "no dep" = "pink")) +  # Custom colors for GAD groups
  scale_linetype_manual(values = c("Gain" = "solid", "Loss" = "dotted")) + 
  poster_theme 
```


# Splitting Data Based on Version Number
```{r Version Number Plots}
versions <- happyData1 %>%
  group_by(userKey, pattern_id, Trial) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop')


summary_data <- versions %>%
    group_by(pattern_id, Trial) %>%
    summarise(mean_percent_risky = mean(percent_risky, na.rm = TRUE),
              se_percent_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()),
              .groups = 'drop')
  
### plot showing risk-taking in gain vs loss domains aross different versions 

  ggplot(summary_data, aes(x = Trial, y = mean_percent_risky, color = Trial)) +
    geom_point(position = position_dodge(0.8), size = 1) +
    geom_errorbar(aes(ymin = mean_percent_risky - se_percent_risky, ymax = mean_percent_risky + se_percent_risky),
                  width = 0.2) +
    labs(
      title = "% Risky Choices (Play 1) N=5394",
      x = "Trial Type",
      y = "% Risky Choices"
    ) +
    theme_minimal() +
    ylim(40, 60) +  
    scale_color_manual(values = c("Gain" = "gold", "Loss" = "coral")) + 
    facet_wrap(~pattern_id)

  # There are differences in % risk taking behaviour across different game sequences.In some sequences, the difference in % gambling in gain versus loss domains is more stark, in others it's quite similar. 
  
  
### histogram showing frequency of the distinct sequences
  
ggplot(happyData1, aes(pattern_id, fill=as.factor(pattern_id)))  + 
  geom_histogram(bins = 24, color="black")

# 2, 4, 10 and 17 are the most frequent sequences. 24, 13, 18 and 20 are the rarest. 
```
### Happiness Based on Versions

```{r Happiness based on Version}

versions <- happyData1 %>%
  group_by(userKey, pattern_id, Trial) %>%
  summarise(mean_happiness = mean(zHappy_filled, na.rm = TRUE),
           .groups = 'drop')


summary_data <- versions %>%
    group_by(pattern_id, Trial) %>%
    summarise(mean_happiness_all = mean(mean_happiness, na.rm = TRUE),
              se_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()),
              .groups = 'drop')

ggplot(summary_data, aes(pattern_id, mean_happiness_all, color=Trial)) +
  geom_point() + 
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") + 
  geom_errorbar(aes(ymin = mean_happiness_all - se_happiness, ymax = mean_happiness_all + se_happiness),
                  width = 0.2) +
  scale_color_manual(values=c("Gain"="gold","Loss" = "coral")) +
   labs(
      title = "Happiness Across Game Versions",
      x = "Unique Sequence",
      y = "Mean Happiness (z-scored)"
    ) +
  ylim(-0.3, 0.3) +
  poster_theme 
 

# also looks like there are considerable differences across game versions in terms of mean z-scored happiness. 
# highest happiness in gain domain looks like it's in version 18, whereas the lowest happiness is in version 1.
# in the loss domain, people look happiest in version 1, and least happy in version 11.

```

### Mean R2 Across Game Versions
```{r R2 Across Game Versions}
versions <- happyData1_6 %>%
  group_by(userKey, pattern_id) %>%
  summarise(mean_r2 = mean(r2_split, na.rm = TRUE))

summary_versions <- versions %>%
  group_by(pattern_id) %>%
    summarise(mean_r2_all = mean(mean_r2, na.rm = TRUE),
              sem_r2 = sd(mean_r2)/ n())

  

ggplot(summary_versions, aes(pattern_id, mean_r2_all, color=as.factor(pattern_id))) +
  geom_point() + 
  geom_errorbar(aes(ymin = mean_r2_all - sem_r2, ymax = mean_r2_all + sem_r2),
                  width = 0.75) +
  scale_color_manual(values=c("Gain"="gold","Loss" = "coral")) +
   labs(
      title = "R2 Across Game Versions",
      x = "Unique Sequence",
      y = "Mean R2"
    ) +
  poster_theme +
  ylim(0.91, 0.96)

# model fits best for play 15 and 24, fits worse for play 8 
```



# Past Information
```{r Computing PastIsland}
happyData1_past <- happyData1 %>%
  arrange(userKey, TrialNumber) %>%
  group_by(userKey) %>%
  mutate(
    # Create an indicator for valid happiness ratings
    happyind = !is.na(zHappy),
    
    # Identify if the current trial is on the same island as the previous valid happiness rating
    prev_happyind_trial = lag(Trial, order_by = TrialNumber),  # Previous trial type (Gain/Loss)
    
    # Set PastIsland based on the previous valid happiness rating's trial type
    PastIsland = case_when(
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Gain" ~ 2,
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Loss" ~ 1,
      TRUE ~ NA_real_  # NA for the first island or no previous valid row
    )
  ) %>%
  ungroup()

happyData1_past <- happyData1_past %>%
  fill(PastIsland, .direction = "up")
```

```{r % Risk-Taking based on PastIsland}

sample_size = length(unique(happyData1_past$userKey))
current_pos_past_pos <- happyData1_past %>%
  filter(PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive",
         Current = "Gain")

current_pos_past_neg <- happyData1_past %>%
  filter(PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative",
         Current = "Gain")
  
current_neg_past_pos <- happyData1_past %>%
  filter(PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive",
         Current = "Loss")

current_neg_past_neg <- happyData1_past %>%
  filter(PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative",
         Current = "Loss")
  
  # Combine results
combined_risky <- bind_rows(current_pos_past_pos, current_pos_past_neg, current_neg_past_pos,current_neg_past_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Past) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past, y = mean_risky, color = Current)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_line(position = position_dodge(0.7), aes(group = Current)) +  # Add lines connecting points within groups
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +
    labs(
title = paste0("% Risky Choices based on Past (N=", sample_size, ")"),
      x = "Past",
      y = "% Risky Choices"
    ) +
    ylim(40,70) + 
    theme_minimal() +
    poster_theme 

```

### % Risk-Taking Based on Past Island and Anx/Depression Split

```{r}
happyData1_past <- happyData1_diag %>% ##DIAG DATA
  arrange(userKey, TrialNumber) %>%
  group_by(userKey) %>%
  mutate(
    # Create an indicator for valid happiness ratings
    happyind = !is.na(zHappy),
    
    # Identify if the current trial is on the same island as the previous valid happiness rating
    prev_happyind_trial = lag(Trial, order_by = TrialNumber),  # Previous trial type (Gain/Loss)
    
    # Set PastIsland based on the previous valid happiness rating's trial type
    PastIsland = case_when(
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Gain" ~ 2,
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Loss" ~ 1,
      TRUE ~ NA_real_  # NA for the first island or no previous valid row
    )
  ) %>%
  ungroup()

happyData1_past <- happyData1_past %>%
  fill(PastIsland, .direction = "up")

### anxiety diagnosis

sample_size = length(unique(happyData1_past$userKey))
current_pos_past_pos <- happyData1_past %>%
  filter(PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive",
         Current = "Gain")

current_pos_past_neg <- happyData1_past %>%
  filter(PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative",
         Current = "Gain")
  
current_neg_past_pos <- happyData1_past %>%
  filter(PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive",
         Current = "Loss")

current_neg_past_neg <- happyData1_past %>%
  filter(PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey,diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative",
         Current = "Loss")
  
  # Combine results
combined_risky <- bind_rows(current_pos_past_pos, current_pos_past_neg, current_neg_past_pos,current_neg_past_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Past, diagnosis_anxiety) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past, y = mean_risky, color = diagnosis_anxiety)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_line(position = position_dodge(0.7), aes(group = diagnosis_anxiety)) +  # Add lines connecting points within groups
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("anx" = "#00BD9D", "no anx" = "lightblue")) +
    labs(
title = paste0("% Risky Choices based on Past (N=", sample_size, ")"),
      x = "Past",
      y = "% Risky Choices"
    ) +
    ylim(40,70) + 
    facet_wrap(~Current) + 
    theme_minimal() +
    poster_theme 
  
### Depression Diagnosis
  ### anxiety diagnosis

sample_size = length(unique(happyData1_past$userKey))
current_pos_past_pos <- happyData1_past %>%
  filter(PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive",
         Current = "Gain")

current_pos_past_neg <- happyData1_past %>%
  filter(PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative",
         Current = "Gain")
  
current_neg_past_pos <- happyData1_past %>%
  filter(PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive",
         Current = "Loss")

current_neg_past_neg <- happyData1_past %>%
  filter(PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey,diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative",
         Current = "Loss")
  
  # Combine results
combined_risky <- bind_rows(current_pos_past_pos, current_pos_past_neg, current_neg_past_pos,current_neg_past_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Past, diagnosis_depression) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past, y = mean_risky, color = diagnosis_depression)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_line(position = position_dodge(0.7), aes(group = diagnosis_depression)) +  # Add lines connecting points within groups
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("dep" = "coral", "no dep" = "pink")) +
    labs(
title = paste0("% Risky Choices based on Past (N=", sample_size, ")"),
      x = "Past",
      y = "% Risky Choices"
    ) +
    ylim(40,70) + 
    facet_wrap(~Current) + 
    theme_minimal() +
    poster_theme 
  
```

# Happiness Based on Past Information

```{r Computing PastIsland}
happyData1_past <- happyData1 %>%
  arrange(userKey, TrialNumber) %>%
  group_by(userKey) %>%
  mutate(
    # Create an indicator for valid happiness ratings
    happyind = !is.na(zHappy),
    
    # Identify if the current trial is on the same island as the previous valid happiness rating
    prev_happyind_trial = lag(Trial, order_by = TrialNumber),  # Previous trial type (Gain/Loss)
    
    # Set PastIsland based on the previous valid happiness rating's trial type
    PastIsland = case_when(
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Gain" ~ 2,
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Loss" ~ 1,
      TRUE ~ NA_real_  # NA for the first island or no previous valid row
    )
  ) %>%
  ungroup()

happyData1_past <- happyData1_past %>%
  fill(PastIsland, .direction = "up")
```

```{r % Risk-Taking based on PastIsland}

sample_size = length(unique(happyData1_past$userKey))

current_pos_past_pos <- happyData1_past %>%
  filter(PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy,na.rm=TRUE),
            mean_predhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Positive",
         Current = "Gain") 


current_pos_past_neg <- happyData1_past %>%
  filter(PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy,na.rm=TRUE),
            mean_predhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Negative",
         Current = "Gain") 


  
current_neg_past_pos <- happyData1_past %>%
  filter(PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy,na.rm=TRUE),
            mean_predhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Positive",
         Current = "Loss") 



current_neg_past_neg <- happyData1_past %>%
  filter(PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy,na.rm=TRUE),
            mean_predhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Negative",
         Current = "Loss") 
  
  # Combine results
combined_risky <- bind_rows(current_pos_past_pos, current_pos_past_neg, current_neg_past_pos,current_neg_past_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Past) %>%
  summarise(overall_mean_happiness = mean(mean_happiness,na.rm=TRUE),
            overall_mean_predhappy = mean(mean_predhappy, na.rm=TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past, y = overall_mean_happiness, fill = Current)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = overall_mean_happiness - sem_happiness, ymax = overall_mean_happiness + sem_happiness),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    geom_point(aes(y = overall_mean_predhappy), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +
    labs(
title = paste0("zHappy based on Past (N=", sample_size, ")"),
      x = "Past",
      y = "zHappy"
    ) +
    theme_minimal() +
    ylim(-0.35, 0.35) +
    poster_theme 

```

# Risk-Taking Based on Past and Future Information

```{r}
happyData1_past <- happyData1 %>%
  arrange(userKey, TrialNumber) %>%
  group_by(userKey) %>%
  mutate(
    # Create an indicator for valid happiness ratings
    happyind = !is.na(zHappy),
    
    # Identify if the current trial is on the same island as the previous valid happiness rating
    prev_happyind_trial = lag(Trial, order_by = TrialNumber),  # Previous trial type (Gain/Loss)
    
    # Set PastIsland based on the previous valid happiness rating's trial type
    PastIsland = case_when(
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Gain" ~ 2,
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Loss" ~ 1,
      TRUE ~ NA_real_  # NA for the first island or no previous valid row
    )
  ) %>%
  ungroup()

happyData1_past <- happyData1_past %>%
  fill(PastIsland, .direction = "up")

```

```{r Future and Past Information}
sample_size = length(unique(happyData1_past$userKey))
# current gain, past positive, future positive
current_pos_past_pos_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Positive",
         Current = "Gain")

# current gain, past negative, future negative
current_pos_past_neg_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Negative",
         Current = "Gain")
  
# current loss, past positive, future positive
current_neg_past_pos_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Positive",
         Current = "Loss")


# curent loss, past negative, future negative
current_neg_past_neg_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Negative",
         Current = "Loss")
  
  # Combine results
combined_risky <- bind_rows(current_pos_past_pos_future_pos, current_pos_past_neg_future_neg, current_neg_past_pos_future_pos,current_neg_past_neg_future_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Past_Future) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past_Future, y = mean_risky, color = Current)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_line(position = position_dodge(0.7), aes(group = Current)) +  # Add lines connecting points within groups
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +
    labs(
title = paste0("% Risky Choices based on Past and Future (N=", sample_size, ")"),
      x = "Past and Future",
      y = "% Risky Choices"
    ) +
    ylim(40,70) + 
    theme_minimal() +
    poster_theme 
  
```

### Split by Diagnosis of Anxiety and Depression

```{r}
### dianosis anxiety
happyData1_past <- happyData1_diag %>%
  arrange(userKey, TrialNumber) %>%
  group_by(userKey) %>%
  mutate(
    # Create an indicator for valid happiness ratings
    happyind = !is.na(zHappy),
    
    # Identify if the current trial is on the same island as the previous valid happiness rating
    prev_happyind_trial = lag(Trial, order_by = TrialNumber),  # Previous trial type (Gain/Loss)
    
    # Set PastIsland based on the previous valid happiness rating's trial type
    PastIsland = case_when(
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Gain" ~ 2,
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Loss" ~ 1,
      TRUE ~ NA_real_  # NA for the first island or no previous valid row
    )
  ) %>%
  ungroup()

happyData1_past <- happyData1_past %>%
  fill(PastIsland, .direction = "up")

# current gain, past positive, future positive
current_pos_past_pos_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Positive",
         Current = "Gain")

# current gain, past negative, future negative
current_pos_past_neg_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Negative",
         Current = "Gain")
  
# current loss, past positive, future positive
current_neg_past_pos_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Positive",
         Current = "Loss")


# curent loss, past negative, future negative
current_neg_past_neg_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey, diagnosis_anxiety) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Negative",
         Current = "Loss")
  
  # Combine results
combined_risky <- bind_rows(current_pos_past_pos_future_pos, current_pos_past_neg_future_neg, current_neg_past_pos_future_pos,current_neg_past_neg_future_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Past_Future, diagnosis_anxiety) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past_Future, y = mean_risky, color = diagnosis_anxiety)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_line(position = position_dodge(0.7), aes(group = diagnosis_anxiety)) +  # Add lines connecting points within groups
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("anx" = "#00BD9D", "no anx" = "#8BD7D2")) +
    labs(
title = paste0("% Risky Choices based on Past and Future (N=", sample_size, ")"),
      x = "Past and Future",
      y = "% Risky Choices"
    ) +
    ylim(40,70) + 
    theme_minimal() +
    poster_theme +
    facet_wrap(~Current)
  
  
### depression diagnosis
  
  current_pos_past_pos_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Positive",
         Current = "Gain")

# current gain, past negative, future negative
current_pos_past_neg_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Negative",
         Current = "Gain")
  
# current loss, past positive, future positive
current_neg_past_pos_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Positive",
         Current = "Loss")


# curent loss, past negative, future negative
current_neg_past_neg_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey, diagnosis_depression) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past_Future = "Negative",
         Current = "Loss")
  
  # Combine results
combined_risky <- bind_rows(current_pos_past_pos_future_pos, current_pos_past_neg_future_neg, current_neg_past_pos_future_pos,current_neg_past_neg_future_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Past_Future, diagnosis_depression) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past_Future, y = mean_risky, color = diagnosis_depression)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_line(position = position_dodge(0.7), aes(group = diagnosis_depression)) +  # Add lines connecting points within groups
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0

    scale_color_manual(values = c("dep" = "coral", "no dep" = "pink")) +
    labs(
title = paste0("% Risky Choices based on Past and Future (N=", sample_size, ")"),
      x = "Past and Future",
      y = "% Risky Choices"
    ) +
    ylim(40,70) + 
    theme_minimal() +
    poster_theme +
    facet_wrap(~Current)
```
### Happiness Based on Past and Future Information

```{r Computing PastIsland}
happyData1_past <- happyData1 %>%
  arrange(userKey, TrialNumber) %>%
  group_by(userKey) %>%
  mutate(
    # Create an indicator for valid happiness ratings
    happyind = !is.na(zHappy),
    
    # Identify if the current trial is on the same island as the previous valid happiness rating
    prev_happyind_trial = lag(Trial, order_by = TrialNumber),  # Previous trial type (Gain/Loss)
    
    # Set PastIsland based on the previous valid happiness rating's trial type
    PastIsland = case_when(
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Gain" ~ 2,
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Loss" ~ 1,
      TRUE ~ NA_real_  # NA for the first island or no previous valid row
    )
  ) %>%
  ungroup()

happyData1_past <- happyData1_past %>%
  fill(PastIsland, .direction = "up")
```

```{r Happiness based on PastIsland and NextIsland}

sample_size = length(unique(happyData1_past$userKey))

current_pos_past_pos <- happyData1_past %>%
  filter(PastIsland == 2, NextIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy,na.rm=TRUE),
            mean_predhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past_Future = "Positive",
         Current = "Gain") 


current_pos_past_neg <- happyData1_past %>%
  filter(PastIsland == 1, NextIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy,na.rm=TRUE),
            mean_predhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past_Future = "Negative",
         Current = "Gain") 


  
current_neg_past_pos <- happyData1_past %>%
  filter(PastIsland == 2 , NextIsland == 2, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy,na.rm=TRUE),
            mean_predhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past_Future = "Positive",
         Current = "Loss") 



current_neg_past_neg <- happyData1_past %>%
  filter(PastIsland == 1, NextIsland == 2, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_happiness = mean(zHappy,na.rm=TRUE),
            mean_predhappy = mean(zHappyPred, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past_Future = "Negative",
         Current = "Loss") 
  
  # Combine results
combined_risky <- bind_rows(current_pos_past_pos, current_pos_past_neg, current_neg_past_pos,current_neg_past_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Past_Future) %>%
  summarise(overall_mean_happiness = mean(mean_happiness,na.rm=TRUE),
            overall_mean_predhappy = mean(mean_predhappy, na.rm=TRUE),
            sem_happiness = sd(mean_happiness, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past_Future, y = overall_mean_happiness, fill = Current)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_errorbar(aes(ymin = overall_mean_happiness - sem_happiness, ymax = overall_mean_happiness + sem_happiness),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    geom_point(aes(y = overall_mean_predhappy), color = "lightblue", shape = 8, size = 3, position=position_dodge(0.7)) +
    scale_fill_manual(values = c("Gain" = "#FFD700", "Loss" = "#FF6347")) +
    labs(
title = paste0("zHappy based on Past and Future (N=", sample_size, ")"),
      x = "Past and Future",
      y = "zHappy"
    ) +
    theme_minimal() +
    ylim(-0.35, 0.35) +
    poster_theme 

```

 
 # Risk-Taking Based on Future and Past (Incongruent)
 


```{r Future and Past Information}
sample_size = length(unique(happyData1_past$userKey))

# current gain, past positive, future positive
current_pos_past_pos_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Positive Future",
         Current = "Gain")

# current gain, past negative, future negative
current_pos_past_neg_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past  = "Negative Past",
         Future = "Negative Future",
         Current = "Gain")
  
# current loss, past positive, future positive
current_neg_past_pos_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past= "Positive Past",
         Future="Positive Future",
         Current = "Loss")


# current loss, past negative, future negative
current_neg_past_neg_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Negative Future",
         Current = "Loss")

# current gain, past negative, future positive
current_pos_past_neg_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Positive Future",
         Current = "Gain")

# current gain, past positive, future negative
current_pos_past_pos_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Negative Future",
         Current = "Gain")
  
# current loss, past negative, future positive
current_neg_past_neg_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 1 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Positive Future",
         Current = "Loss")


# current loss, past positive, future negative
current_neg_past_pos_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 2, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Negative Future",
         Current = "Loss")
  
  # Combine results
combined_risky <- bind_rows(current_pos_past_neg_future_pos, current_pos_past_pos_future_neg, current_neg_past_neg_future_pos,current_neg_past_pos_future_neg,current_pos_past_pos_future_pos,current_pos_past_neg_future_neg,current_neg_past_pos_future_pos,current_neg_past_neg_future_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Past, Future) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past, y = mean_risky, color = Future, group = Future)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_line(position = position_dodge(0.7), aes(group = Future)) +  # Add lines connecting points within groups
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    labs(
title = paste0("% Risky Choices based on Past and Future (N=", sample_size, ")"),
      x = "Past",
      y = "% Risky Choices"
    ) +
    theme_minimal() +
    ylim(40, 70) +
    poster_theme +
    facet_wrap(~Current)
  


  
```

 # Statistical Tests to Determine Effect of PastIsland NextIsland
 
```{r Statistical Tests}


happyData1_past$Choice <- as.factor(happyData1_past$Choice)
happyData1_past$ChoiceBinary <- ifelse(happyData1_past$Choice == 2, 1, 0) # if risk chosen 1, if safe chosen, 0
happyData1_past$PastIslandBinary <- ifelse(happyData1_past$PastIsland == 2, 1, 0) # if positive 1, if negative 0
happyData1_past$NextIslandBinary <- ifelse(happyData1_past$NextIsland == 2, 1, 0) # if positive 1, if negative 0 - so 0 is my refernece 


## DOMAIN - split by domain
happyData1_past_gain <- happyData1_past %>%
  filter(Trial=="Gain")

lm1_gain_future <-  glm(ChoiceBinary ~ NextIslandBinary, 
           data=happyData1_past_gain,
           family=binomial)
summary(lm1_gain_future)

lm1_gain_past <-  glm(ChoiceBinary ~ PastIslandBinary, 
           data=happyData1_past_gain,
           family=binomial)
summary(lm1_gain_past)


lm1_gain <- glm(ChoiceBinary ~ PastIslandBinary + NextIslandBinary, 
           data=happyData1_past_gain,
           family=binomial)
summary(lm1_gain)


#interaction
lm2_gain <- glm(ChoiceBinary ~  PastIslandBinary*NextIslandBinary, 
           data=happyData1_past_gain,
           family=binomial)
summary(lm2_gain)



## LOSS DOMAIN
happyData1_past_loss <- happyData1_past %>%
  filter(Trial=="Loss")

lm1_loss_future <-  glm(ChoiceBinary ~ NextIslandBinary, 
           data=happyData1_past_loss,
           family=binomial)
summary(lm1_loss_future)

lm1_loss_past <-  glm(ChoiceBinary ~ PastIslandBinary, 
           data=happyData1_past_loss,
           family=binomial)
summary(lm1_loss_past)


lm1_loss <- glm(ChoiceBinary ~ PastIslandBinary + NextIslandBinary, 
           data=happyData1_past_loss,
           family=binomial)
summary(lm1_loss)

# interaction
lm2_loss <- glm(ChoiceBinary ~  PastIslandBinary*NextIslandBinary, 
           data=happyData1_past_loss,
           family=binomial)
summary(lm2_loss)

```
 
### Split by Anxiety and Depression Diagnoses

```{r}
happyData1_past_diag <- happyData1_diag %>%
  arrange(userKey, TrialNumber) %>%
  group_by(userKey) %>%
  mutate(
    # Create an indicator for valid happiness ratings
    happyind = !is.na(zHappy),
    
    # Identify if the current trial is on the same island as the previous valid happiness rating
    prev_happyind_trial = lag(Trial, order_by = TrialNumber),  # Previous trial type (Gain/Loss)
    
    # Set PastIsland based on the previous valid happiness rating's trial type
    PastIsland = case_when(
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Gain" ~ 2,
      lag(happyind, order_by = TrialNumber) & prev_happyind_trial == "Loss" ~ 1,
      TRUE ~ NA_real_  # NA for the first island or no previous valid row
    )
  ) %>%
  ungroup()

happyData1_past_diag <- happyData1_past_diag %>%
  fill(PastIsland, .direction = "up")

# anxiety diagnosis
anx <- happyData1_past_diag %>%
  filter(diagnosis_anxiety=="no anx")

sample_size = length(unique(anx$userKey))

# current gain, past positive, future positive
current_pos_past_pos_future_pos <- anx %>%
  filter(NextIsland == 2, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Positive Future",
         Current = "Gain")

# current gain, past negative, future negative
current_pos_past_neg_future_neg <- anx %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past  = "Negative Past",
         Future = "Negative Future",
         Current = "Gain")
  
# current loss, past positive, future positive
current_neg_past_pos_future_pos <- anx %>%
  filter(NextIsland == 2, PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past= "Positive Past",
         Future="Positive Future",
         Current = "Loss")


# current loss, past negative, future negative
current_neg_past_neg_future_neg <- anx %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Negative Future",
         Current = "Loss")

# current gain, past negative, future positive
current_pos_past_neg_future_pos <- anx %>%
  filter(NextIsland == 2, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Positive Future",
         Current = "Gain")

# current gain, past positive, future negative
current_pos_past_pos_future_neg <- anx %>%
  filter(NextIsland == 1, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
                          risky_choices = sum(Choice == 2, na.rm = TRUE),

            percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Negative Future",
         Current = "Gain")
  
# current loss, past negative, future positive
current_neg_past_neg_future_pos <- anx %>%
  filter(NextIsland == 2, PastIsland == 1 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Positive Future",
         Current = "Loss")


# current loss, past positive, future negative
current_neg_past_pos_future_neg <- anx %>%
  filter(NextIsland == 1, PastIsland == 2, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(total_choices = n(),
              risky_choices = sum(Choice == 2, na.rm = TRUE),
              percent_risky = (risky_choices / total_choices) * 100,
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Negative Future",
         Current = "Loss")
  
  # Combine results
combined_risky <- bind_rows(current_pos_past_neg_future_pos, current_pos_past_pos_future_neg, current_neg_past_neg_future_pos,current_neg_past_pos_future_neg,current_pos_past_pos_future_pos,current_pos_past_neg_future_neg,current_neg_past_pos_future_pos,current_neg_past_neg_future_neg)

summary_combined <- combined_risky %>%
  group_by(Current, Past, Future) %>%
  summarise(mean_risky = mean(percent_risky,na.rm=TRUE),
            sem_risky = sd(percent_risky, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past, y = mean_risky, color = Future, group = Future)) +
    geom_point(position = position_dodge(0.7), width = 0.7) +
    geom_line(position = position_dodge(0.7), aes(group = Future)) +  # Add lines connecting points within groups
    geom_errorbar(aes(ymin = mean_risky - sem_risky, ymax = mean_risky + sem_risky),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept = 50, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    labs(
title = paste0("% Risky Choices based on Past and Future (N=", sample_size, ")"),
      x = "Past",
      y = "% Risky Choices"
    ) +
    theme_minimal() +
    ylim(40, 70) +
    poster_theme +
    facet_wrap(~Current)
```

```{r Statistical Tests}


anx$Choice <- as.factor(anx$Choice)
anx$ChoiceBinary <- ifelse(anx$Choice == 2, 1, 0) # if risk chosen 1, if safe chosen, 0
anx$PastIslandBinary <- ifelse(anx$PastIsland == 2, 1, 0) # if positive 1, if negative 0
anx$NextIslandBinary <- ifelse(anx$NextIsland == 2, 1, 0) # if positive 1, if negative 0 - so 0 is my refernece 


## DOMAIN - split by domain
happyData1_past_gain <- anx %>%
  filter(Trial=="Gain")

lm1_gain_future <-  glm(ChoiceBinary ~ NextIslandBinary, 
           data=happyData1_past_gain,
           family=binomial)
summary(lm1_gain_future)

lm1_gain_past <-  glm(ChoiceBinary ~ PastIslandBinary, 
           data=happyData1_past_gain,
           family=binomial)
summary(lm1_gain_past)


lm1_gain <- glm(ChoiceBinary ~ PastIslandBinary + NextIslandBinary, 
           data=happyData1_past_gain,
           family=binomial)
summary(lm1_gain)


#interaction
lm2_gain <- glm(ChoiceBinary ~  PastIslandBinary*NextIslandBinary, 
           data=happyData1_past_gain,
           family=binomial)
summary(lm2_gain)



## LOSS DOMAIN
happyData1_past_loss <- anx %>%
  filter(Trial=="Loss")

lm1_loss_future <-  glm(ChoiceBinary ~ NextIslandBinary, 
           data=happyData1_past_loss,
           family=binomial)
summary(lm1_loss_future)

lm1_loss_past <-  glm(ChoiceBinary ~ PastIslandBinary, 
           data=happyData1_past_loss,
           family=binomial)
summary(lm1_loss_past)


lm1_loss <- glm(ChoiceBinary ~ PastIslandBinary + NextIslandBinary, 
           data=happyData1_past_loss,
           family=binomial)
summary(lm1_loss)

# interaction
lm2_loss <- glm(ChoiceBinary ~  PastIslandBinary*NextIslandBinary, 
           data=happyData1_past_loss,
           family=binomial)
summary(lm2_loss)

```

### Interaction between Next and Past Island in Happiness
 
```{r Future and Past Information}
sample_size = length(unique(happyData1_past$userKey))

# current gain, past positive, future positive
current_pos_past_pos_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Positive Future",
         Current = "Gain")

# current gain, past negative, future negative
current_pos_past_neg_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past  = "Negative Past",
         Future = "Negative Future",
         Current = "Gain")
  
# current loss, past positive, future positive
current_neg_past_pos_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past= "Positive Past",
         Future="Positive Future",
         Current = "Loss")


# current loss, past negative, future negative
current_neg_past_neg_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Negative Future",
         Current = "Loss")

# current gain, past negative, future positive
current_pos_past_neg_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Positive Future",
         Current = "Gain")

# current gain, past positive, future negative
current_pos_past_pos_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Negative Future",
         Current = "Gain")
  
# current loss, past negative, future positive
current_neg_past_neg_future_pos <- happyData1_past %>%
  filter(NextIsland == 2, PastIsland == 1 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Positive Future",
         Current = "Loss")


# current loss, past positive, future negative
current_neg_past_pos_future_neg <- happyData1_past %>%
  filter(NextIsland == 1, PastIsland == 2, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Negative Future",
         Current = "Loss")
  
  # Combine results
combined_happy <- bind_rows(current_pos_past_neg_future_pos, current_pos_past_pos_future_neg, current_neg_past_neg_future_pos,current_neg_past_pos_future_neg,current_pos_past_pos_future_pos,current_pos_past_neg_future_neg,current_neg_past_pos_future_pos,current_neg_past_neg_future_neg)

summary_combined <- combined_happy %>%
  group_by(Current, Past, Future) %>%
  summarise(overall_mean_zHappy = mean(mean_zHappy,na.rm=TRUE),
            sem_zHappy = sd(mean_zHappy, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past, y = overall_mean_zHappy, fill = Future, group = Future)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_line(position = position_dodge(0.7), aes(group = Future)) +  # Add lines connecting points within groups
    geom_errorbar(aes(ymin = overall_mean_zHappy - sem_zHappy, ymax = overall_mean_zHappy + sem_zHappy),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept =0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    labs(
title = paste0("zHappy based on Past and Future (N=", sample_size, ")"),
      x = "Past",
      y = "zHappy"
    ) +
    theme_minimal() +
    ylim(-0.4,0.4)+
    poster_theme +
    facet_wrap(~Current)
  

  
```


```{r}


# happy ~ past island + next island
happyData1_past$PastIslandBinary <- ifelse(happyData1_past$PastIsland == 2, 1, 0) # if positive 1, if negative 0
happyData1_past$NextIslandBinary <- ifelse(happyData1_past$NextIsland == 2, 1, 0) # if positive 1, if negative 0 - so 0 is my refernece 



### Gain Domain

gain = happyData1_past%>%
  filter(Trial=="Gain")

lm1_gain_future <- lm(zHappy~NextIslandBinary, data = gain)
summary(lm1_gain_future)

lm1_gain_past <- lm(zHappy~PastIslandBinary, data = gain)
summary(lm1_gain_past)

lm1_gain <- lm(zHappy~PastIslandBinary + NextIslandBinary, data = gain)
summary(lm1_gain)

#interaction
lm2_gain <- lm(zHappy~PastIslandBinary*NextIslandBinary, data = gain)
summary(lm2_gain)

### Loss Domain

loss = happyData1_past%>%
  filter(Trial=="Loss")

lm1_loss_future <- lm(zHappy~NextIslandBinary, data = loss)
summary(lm1_loss_future)

lm1_loss_past <- lm(zHappy~PastIslandBinary, data = loss)
summary(lm1_loss_past)


lm1_loss <- lm(zHappy~PastIslandBinary + NextIslandBinary, data = loss)
summary(lm1_loss)

#interaction
lm2_loss <- lm(zHappy~ PastIslandBinary*NextIslandBinary, data = loss)
summary(lm2_loss)
```
### anxiety and depression diagnosis

```{r}

# anxiety diagnosis
anx <- happyData1_past_diag %>%
  filter(diagnosis_depression=="no dep")

sample_size = length(unique(anx$userKey))


# current gain, past positive, future positive
current_pos_past_pos_future_pos <- anx %>%
  filter(NextIsland == 2, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Positive Future",
         Current = "Gain")

# current gain, past negative, future negative
current_pos_past_neg_future_neg <- anx %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past  = "Negative Past",
         Future = "Negative Future",
         Current = "Gain")
  
# current loss, past positive, future positive
current_neg_past_pos_future_pos <- anx %>%
  filter(NextIsland == 2, PastIsland == 2 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past= "Positive Past",
         Future="Positive Future",
         Current = "Loss")


# current loss, past negative, future negative
current_neg_past_neg_future_neg <- anx %>%
  filter(NextIsland == 1, PastIsland == 1, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Negative Future",
         Current = "Loss")

# current gain, past negative, future positive
current_pos_past_neg_future_pos <- anx %>%
  filter(NextIsland == 2, PastIsland == 1, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Positive Future",
         Current = "Gain")

# current gain, past positive, future negative
current_pos_past_pos_future_neg <- anx %>%
  filter(NextIsland == 1, PastIsland == 2, Trial == "Gain") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Negative Future",
         Current = "Gain")
  
# current loss, past negative, future positive
current_neg_past_neg_future_pos <- anx %>%
  filter(NextIsland == 2, PastIsland == 1 , Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Negative Past",
         Future = "Positive Future",
         Current = "Loss")


# current loss, past positive, future negative
current_neg_past_pos_future_neg <- anx %>%
  filter(NextIsland == 1, PastIsland == 2, Trial == "Loss") %>%
  group_by(userKey) %>%
  summarise(mean_zHappy = mean(zHappy, na.rm=TRUE),
              .groups = 'drop') %>%
  mutate(Past = "Positive Past",
         Future = "Negative Future",
         Current = "Loss")
  
  # Combine results
combined_happy <- bind_rows(current_pos_past_neg_future_pos, current_pos_past_pos_future_neg, current_neg_past_neg_future_pos,current_neg_past_pos_future_neg,current_pos_past_pos_future_pos,current_pos_past_neg_future_neg,current_neg_past_pos_future_pos,current_neg_past_neg_future_neg)

summary_combined <- combined_happy %>%
  group_by(Current, Past, Future) %>%
  summarise(overall_mean_zHappy = mean(mean_zHappy,na.rm=TRUE),
            sem_zHappy = sd(mean_zHappy, na.rm = TRUE) / sqrt(n()))

  # Plotting
  ggplot(summary_combined, aes(x = Past, y = overall_mean_zHappy, fill = Future, group = Future)) +
    geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.7, color = "black") +
    geom_line(position = position_dodge(0.7), aes(group = Future)) +  # Add lines connecting points within groups
    geom_errorbar(aes(ymin = overall_mean_zHappy - sem_zHappy, ymax = overall_mean_zHappy + sem_zHappy),
                  position = position_dodge(0.7), width = 0.2) + 
    geom_hline(yintercept =0, linetype = "dotted", color = "black") +  # Add a dotted line at y=0
    labs(
title = paste0("zHappy based on Past and Future (N=", sample_size, ")"),
      x = "Past",
      y = "zHappy"
    ) +
    theme_minimal() +
    ylim(-0.4,0.4)+
    poster_theme +
    facet_wrap(~Current)
```


```{r}
# happy ~ past island + next island
anx$PastIslandBinary <- ifelse(anx$PastIsland == 2, 1, 0) # if positive 1, if negative 0
anx$NextIslandBinary <- ifelse(anx$NextIsland == 2, 1, 0) # if positive 1, if negative 0 - so 0 is my refernece 



### Gain Domain

gain = anx %>%
  filter(Trial=="Gain")

lm1_gain_future <- lm(zHappy~NextIslandBinary, data = gain)
summary(lm1_gain_future)

lm1_gain_past <- lm(zHappy~PastIslandBinary, data = gain)
summary(lm1_gain_past)

lm1_gain <- lm(zHappy~PastIslandBinary + NextIslandBinary, data = gain)
summary(lm1_gain)

#interaction
lm2_gain <- lm(zHappy~PastIslandBinary*NextIslandBinary, data = gain)
summary(lm2_gain)

### Loss Domain

loss = anx %>%
  filter(Trial=="Loss")

lm1_loss_future <- lm(zHappy~NextIslandBinary, data = loss)
summary(lm1_loss_future)

lm1_loss_past <- lm(zHappy~PastIslandBinary, data = loss)
summary(lm1_loss_past)


lm1_loss <- lm(zHappy~PastIslandBinary + NextIslandBinary, data = loss)
summary(lm1_loss)

#interaction
lm2_loss <- lm(zHappy~ PastIslandBinary*NextIslandBinary, data = loss)
summary(lm2_loss)


```

